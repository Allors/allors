group AllorsCSharpRepository;

TemplateId() ::= <<14F49218-A676-43ba-9CBD-B8FFA059D1BF>>
TemplateName() ::= <<Allors C# Meta>>
TemplateVersion() ::= <<3.0.19>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(repository) ::= <<
$!
Copyright 2002-2022 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
    <generation template="m" output="m.g.cs"/>
    <generation template="units" output="units.g.cs"/>
    <generation template="interfaces" output="interfaces.g.cs"/>
    <generation template="classes" output="classes.g.cs"/>
    <generation template="relationTypes" output="relationTypes.g.cs"/>
</generations>
>>

m(repository) ::= <<
namespace Allors.Database.Meta
{
    public sealed class M : Allors.Database.Meta.MetaPopulation {
        // Units
$repository.Units:{unit|$m_unit_declaration(unit)$}; separator="\n"$

        // Interfaces
$repository.Interfaces:{interface|$m_interface_declaration(interface)$}; separator="\n"$

        // Classes
$repository.Classes:{class|$m_class_declaration(class)$}; separator="\n"$
    }
}
>>

m_unit_declaration(unit) ::= <<
        public Meta$unit.SingularName$ $unit.SingularName$ { get; set; }
>>

m_interface_declaration(interface) ::= <<
        public Meta$interface.SingularName$ $interface.SingularName$ { get; set; }
>>

m_class_declaration(class) ::= <<
        public Meta$class.SingularName$ $class.SingularName$ { get; set; }
>>

m_unit_implementation(unit) ::= <<
        IMeta$unit.SingularName$ M.$unit.SingularName$ => this.$unit.SingularName$;
>>

m_interface_implementation(interface) ::= <<
        IMeta$interface.SingularName$ M.$interface.SingularName$ => this.$interface.SingularName$;
>>

m_class_implementation(class) ::= <<
        IMeta$class.SingularName$ M.$class.SingularName$ => this.$class.SingularName$;
>>

units(repository) ::= <<
namespace Allors.Database.Meta
{
$repository.Units:{unit|$define_unit(unit)$}; separator="\n"$
}
>>

define_unit(unit) ::= <<
    public class Meta$unit.SingularName$ : Unit {
        public Meta$unit.SingularName$(M m, System.Guid id, string tag, string singularName, string assignedPluralName) : base(m, id, tag, singularName, assignedPluralName) {}
    }
>>

interfaces(repository) ::= <<
namespace Allors.Database.Meta
{
$repository.Interfaces:{interface|$define_interface(interface)$}; separator="\n"$
}
>>

define_interface(interface) ::= <<
    public partial class Meta$interface.SingularName$ : Interface {
        public Meta$interface.SingularName$(M m, System.Guid id, System.Collections.Generic.IReadOnlyList<Interface> directSupertypes, string singularName, string assignedPluralName) : base(m, id, directSupertypes, singularName, assignedPluralName)
        {
$if(interface.ExtensionAttributes)$
                Attributes = { $interface.ExtensionAttributes:{attribute|$attribute.Name$ = $attribute.Value$}; separator=", "$ }
$endif$
        }

        public M M => (M)this.MetaPopulation;

$interface.Subtypes:{subtype|$define_subtype(subtype)$}; separator="\n"$

$interface.DefinedProperties:{property|$define_relationEndType(property)$}; separator="\n"$

$interface.InheritedProperties:{property|$define_inheritedrelationEndType(property)$}; separator="\n"$

$interface.DefinedReverseProperties:{property|$define_reverserelationEndType(property)$}; separator="\n"$

$interface.InheritedReverseProperties:{property|$define_inheritedreverserelationEndType(property)$}; separator="\n"$

$interface.DefinedMethods:{method|$define_methodType(method)$}; separator="\n"$

$interface.InheritedMethods:{method|$define_methodType(method)$}; separator="\n"$
    }
>>

classes(repository) ::= <<
namespace Allors.Database.Meta
{
$repository.Classes:{class|$define_class(class)$}; separator="\n"$
}
>>

define_class(class) ::= <<
    public partial class Meta$class.SingularName$ : Class {
        public Meta$class.SingularName$(M m, System.Guid id, Interface[] directSupertypes, string singularName, string assignedPluralName) : base(m, id, directSupertypes, singularName, assignedPluralName)
        {
$if(class.ExtensionAttributes)$
                Attributes = { $class.ExtensionAttributes:{attribute|$attribute.Name$ = $attribute.Value$}; separator=", "$ }
$endif$
        }
        
        public M M => (M)this.MetaPopulation;

$class.DefinedProperties:{property|$define_relationEndType(property)$}; separator="\n"$

$class.InheritedProperties:{property|$define_inheritedrelationEndType(property)$}; separator="\n"$

$class.DefinedReverseProperties:{property|$define_reverserelationEndType(property)$}; separator="\n"$

$class.InheritedReverseProperties:{property|$define_inheritedreverserelationEndType(property)$}; separator="\n"$

$class.DefinedMethods:{method|$define_methodType(method)$}; separator="\n"$

$class.InheritedMethods:{method|$define_methodType(method)$}; separator="\n"$
    }
>>

define_subtype(subtype) ::= <<
        public Meta$subtype.SingularName$ As$subtype.SingularName$ { get; set; }
>>

define_relationEndType(property) ::= <<
        public Meta$property.DefiningType.SingularName$$property.RoleName$.R $property.RoleName$ { get; set; }
>>

define_inheritedrelationEndType(property) ::= <<
 $if(property.DefiningProperty)$
        public Meta$property.DefiningProperty.DefiningType.SingularName$$property.DefiningProperty.RoleName$.R $property.DefiningProperty.RoleName$ { get; set; }
 $else$
        public Meta$property.DefiningType.SingularName$$property.RoleName$.R $property.RoleName$ { get; set; }
 $endif$
>>

define_reverserelationEndType(property) ::= <<
        public Meta$property.DefiningType.SingularName$$property.RoleName$.A $property.AssociationName$ { get; set; }
>>

define_inheritedreverserelationEndType(property) ::= <<
        public Meta$property.DefiningType.SingularName$$property.RoleName$.A $property.AssociationName$ { get; set; }
>>

define_methodType(method) ::= <<
        public MethodType $method.Name$ { get; set; }
>>

implement_subtype(composite, subtype) ::= <<
        IMeta$subtype.SingularName$ IMeta$composite.SingularName$.As$subtype.SingularName$ => this.As$subtype.SingularName$ { get; set; }
>>

implement_relationEndType(composite, property) ::= <<
        IMeta$property.DefiningType.SingularName$$property.RoleName$ IMeta$composite.SingularName$.$property.RoleName$ => this.$property.RoleName$;
>>

implement_inheritedrelationEndType(composite, property) ::= <<
 $if(property.DefiningProperty)$
        IMeta$property.DefiningProperty.DefiningType.SingularName$$property.DefiningProperty.RoleName$ IMeta$composite.SingularName$.$property.DefiningProperty.RoleName$ => this.$property.DefiningProperty.RoleName$;
 $else$
        IMeta$property.DefiningType.SingularName$$property.RoleName$ IMeta$composite.SingularName$.$property.RoleName$ => this.$property.RoleName$;
 $endif$
>>

implement_reverserelationEndType(composite, property) ::= <<
        IMeta$property.AssociationName$ IMeta$composite.SingularName$.$property.AssociationName$ => this.$property.AssociationName$;
>>

implement_inheritedreverserelationEndType(composite, property) ::= <<
        IMeta$property.AssociationName$ IMeta$composite.SingularName$.$property.AssociationName$ => this.$property.AssociationName$;
>>

implement_methodType(composite, method) ::= <<
        IMethodType IMeta$composite.SingularName$.$method.Name$ => this.$method.Name$;
>>

relationTypes(repository) ::= <<
namespace Allors.Database.Meta
{
$repository.Composites:{composite|$define_relationTypes(composite)$}; separator="\n"$
}
>>

define_relationTypes(composite) ::= <<
$composite.DefinedProperties:{property|$define_relationType(property)$}; separator="\n"$
>>

define_relationType(property) ::= <<
    public partial class Meta$property.DefiningType.SingularName$$property.RoleName$ : RelationType
    {
        public Meta$property.DefiningType.SingularName$$property.RoleName$(M m, System.Guid id, Multiplicity? multiplicity, bool isDerived) : base(m, id, multiplicity, isDerived, new A(m), new R(m))
        {
$if(property.RelationTypeExtensionAttributes)$        
            $property.RelationTypeExtensionAttributes:{attribute|this.Attributes.$attribute.Name$ = $attribute.Value$;}; separator="\n"$
$endif$ 
$if(property.AssociationTypeExtensionAttributes)$        
               $property.AssociationTypeExtensionAttributes:{attribute|this.AssociationType.Attributes.$attribute.Name$ = $attribute.Value$;}; separator="\n"$ 
$endif$
$if(property.RoleTypeExtensionAttributes)$
            $property.RoleTypeExtensionAttributes:{attribute|this.RoleType.Attributes.$attribute.Name$ = $attribute.Value$;}; separator="\n"$
$endif$
$if(property.CompositeRoleTypeExtensionAttributes)$
                $property.CompositeRoleTypeExtensionAttributes:{attribute|this.RoleType.CompositeRoleType.Attributes.$attribute.Name$ = $attribute.Value$;}; separator="\n"$  
$endif$
                $if(property.AttributeByName.Size)$this.RoleType.Size = $property.AttributeByName.Size.Value$;$endif$
                $if(property.AttributeByName.Precision)$this.RoleType.Precision = $property.AttributeByName.Precision.Value$;$endif$
                $if(property.AttributeByName.Scale)$this.RoleType.Scale = $property.AttributeByName.Scale.Value$;$endif$
        }

        new public A AssociationType => (A)((IRelationType)this).AssociationType;

        new public R RoleType => (R)((IRelationType)this).RoleType;

        public class A : AssociationType
        {
            public A(M m) : base(m.$property.DefiningType.SingularName$)
            {
            }

            public Meta$property.DefiningType.SingularName$ ObjectType => (Meta$property.DefiningType.SingularName$)((IAssociationType)this).ObjectType;

            public R RoleType => (R)((IAssociationType)this).RoleType;
        }

        public class R : RoleType
        {
            public R(M m) : base(m.$property.ObjectType.SingularName$, $if(property.AssignedRoleSingularName)$"$property.RoleSingularName$"$else$null$endif$, $if(property.AssignedRolePluralName)$"$property.RolePluralName$"$else$null$endif$)
            {
            }

            public Meta$property.ObjectType.SingularName$ ObjectType => (Meta$property.ObjectType.SingularName$)((IRoleType)this).ObjectType;

            public A AssociationType => (A)((IRoleType)this).AssociationType;
        }
    }

>>

boolean(value) ::= "$if(value)$true$else$false$endif$"
