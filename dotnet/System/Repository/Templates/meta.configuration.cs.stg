group AllorsCSharpRepository;

TemplateId() ::= <<14F49218-A676-43ba-9CBD-B8FFA059D1BF>>
TemplateName() ::= <<Allors C# Meta>>
TemplateVersion() ::= <<3.0.2>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(repository) ::= <<
$!
Copyright 2002-2022 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
    <generation template="ids" output="ids.g.cs"/>
    <generation template="builder" output="builder.g.cs"/>
</generations>
>>

ids(repository) ::= <<
namespace Allors.Database.Meta.Configuration
{
    using System;

    public partial class Ids {
        // Domains
$repository.Domains:{assembly|$ids_domain(assembly)$}; separator="\n"$

        // Units
$repository.Units:{unit|$ids_unit(unit)$}; separator="\n"$

        // Composites & Relations
$repository.composites:{composite|$ids_composite(composite)$}; separator="\n"$
    }
}
>>

ids_domain(composite) ::= <<
        public static readonly Guid $assembly.Name$ = new Guid("$assembly.Id$");
>>

ids_unit(composite) ::= <<
        public static readonly Guid $unit.SingularName$ = new Guid("$unit.Id$");
>>

ids_composite(composite) ::= <<
        public static readonly Guid $composite.SingularName$ = new Guid("$composite.Id$");
$composite.DefinedProperties:{property|$ids_composite_property(property)$}; separator="\n"$
$composite.DefinedMethods:{method|$ids_composite_methodType(method)$}; separator="\n"$

>>

ids_composite_property(property) ::= <<
        public static readonly Guid $composite.SingularName$$property.RoleName$ = new Guid("$property.Id$");
>>

ids_composite_methodType(method) ::= <<
        public static readonly Guid $composite.SingularName$$method.Name$ = new Guid("$method.Id$");
>>

builder(repository) ::= <<
// <auto-generated />
namespace Allors.Database.Meta.Configuration
{
	public partial class MetaBuilder
	{
        #region Domains
        internal class Domains
        {
$repository.Domains:{assembly|              public Domain $assembly.Name$;}; separator="\n"$
        }
        #endregion

	#region RelationTypes
        internal class RelationTypes
        {
$repository.Composites:{composite|$define_relationTypes(composite)$}; separator="\n"$
        }
        #endregion

        #region MethodTypes
        internal class MethodTypes
        {
$repository.Composites:{composite|$define_methods(composite)$}; separator="\n"$
        }
        #endregion

        public M Build() {
            var meta =  new M();
            var domains = new Domains();
            var relationTypes = new RelationTypes();
            var methodTypes = new MethodTypes();

            this.BuildDomains(meta, domains);
            this.BuildUnits(meta, domains);
            this.BuildInterfaces(meta, domains);
            this.BuildClasses(meta, domains);
            this.BuildRelationTypes(meta, domains, relationTypes);
            this.BuildMethodTypes(meta, domains, methodTypes);

            this.AssignRelationEndTypes(meta, relationTypes);
            this.AssignMethodTypes(meta, methodTypes);

            meta.Initialize();

            this.ExtendCompositeRoleTypes(meta, relationTypes);
            this.ExtendCompositeMethodTypes(meta, methodTypes);

$repository.Domains:{assembly|             this.Build$assembly.Name$(meta, domains, relationTypes, methodTypes);}; separator="\n"$

            meta.Derive();

            return meta;
        }

		private void BuildDomains(M meta, Domains domains)
		{
$repository.Domains:{assembly|$build_domain(assembly)$}; separator="\n"$
		}

		private void BuildUnits(M meta, Domains domains)
		{
$repository.Units:{unit|$build_unit(unit)$}; separator="\n"$
		}

		private void BuildInterfaces(M meta, Domains domains)
		{
$repository.Interfaces:{interface|$build_interface(interface)$}; separator="\n"$
		}

		private void BuildClasses(M meta, Domains domains)
		{
$repository.Classes:{class|$build_class(class)$}; separator="\n"$
		}

		private void BuildRelationTypes(M meta, Domains domains, RelationTypes relationTypes)
		{
$repository.Composites:{composite|$build_relations(composite)$}; separator="\n"$
		}

		private void BuildMethodTypes(M meta, Domains domains, MethodTypes methodTypes)
		{
$repository.Composites:{composite|$build_methods(composite)$}; separator="\n"$
		}

        private void AssignRelationEndTypes(M meta, RelationTypes relationTypes)
        {
$repository.Composites:{composite|$assign_properties(composite)$}; separator="\n"$
        }

        private void AssignMethodTypes(M meta, MethodTypes methodTypes)
        {
$repository.Composites:{composite|$assign_methods(composite)$}; separator="\n"$
        }
        
        private void ExtendCompositeRoleTypes(M meta, RelationTypes relationTypes)
        {
$repository.Composites:{composite|$extend_compositeRoleTypes(composite)$}; separator="\n"$
        }

        private void ExtendCompositeMethodTypes(M meta, MethodTypes methodTypes)
        {
$repository.Composites:{composite|$extend_compositeMethodTypes(composite)$}; separator="\n"$
        }
	}
}
>>

define_relationTypes(composite) ::= <<
$composite.DefinedProperties:{property|             public Meta$property.DefiningType.SingularName$$property.RoleName$ $property.DefiningType.SingularName$$property.RoleName$;}; separator="\n"$
>>

define_roleClasses(class) ::= <<
$class.ImplementedProperties:{property|             public RoleClass $class.SingularName$$property.RoleName$;}; separator="\n"$
>>

assign_roleClasses(class) ::= <<
$class.ImplementedProperties:{property|                 Metathis.$class.SingularName$$property.RoleName$ = relationTypes.$property.DefiningProperty.DefiningType.SingularName$$property.DefiningProperty.RoleName$.RoleClassBy(meta.$class.SingularName$);}; separator="\n"$
>>

define_methods(composite) ::= <<
$composite.DefinedMethods:{method|          public MethodType $method.DefiningType.SingularName$$method.Name$;}; separator="\n"$
>>

build_domain(assembly) ::= <<
	        domains.$assembly.Name$ = meta.Create<Domain>(v=>
                        {
                                v.Id = Ids.$assembly.Name$; 
                                v.Tag = v.Id.Tag();
                                v.Name = "$assembly.Name$"; 
                                v.DirectSuperdomains = new Domain[]{$assembly.DirectSuperdomains:{superdomain|domains.$superdomain.Name$}; separator=","$};
                        });
	        {
$if(assembly.ExtensionAttributes)$
                Attributes = { $assembly.ExtensionAttributes:{attribute|$attribute.Name$ = $attribute.Value$}; separator=", "$ }
$endif$
	        };
>>

build_unit(unit) ::= <<
            meta.$unit.SingularName$ = meta.Create<Meta$unit.SingularName$>(v=>
            {
                v.Id = Ids.$unit.SingularName$; 
                v.Tag = UnitTags.$unit.SingularName$;
                v.SingularName = UnitNames.$unit.SingularName$; 
            });
>>

build_interface(interface) ::= <<
                meta.$interface.SingularName$ = meta.Create<Meta$interface.SingularName$>(v=>
                        {
                                v.Id = Ids.$interface.SingularName$; 
                                v.Tag = v.Id.Tag();
                                v.DirectSupertypes = new Interface[]{$interface.ImplementedInterfaces:{implementedInterface|meta.$implementedInterface.SingularName$}; separator=", "$}; 
                                v.SingularName = "$interface.SingularName$";
                                v.AssignedPluralName = $if(interface.AssignedPluralName)$"$interface.AssignedPluralName$"$else$null$endif$;
                        });
>>

build_class(class) ::= <<
                meta.$class.SingularName$ = meta.Create<Meta$class.SingularName$>(v=>
                        {
                                v.Id = Ids.$class.SingularName$; 
                                v.Tag = v.Id.Tag();
                                v.DirectSupertypes = new Interface[]{$class.ImplementedInterfaces:{implementedInterface|meta.$implementedInterface.SingularName$}; separator=", "$}; 
                                v.SingularName = "$class.SingularName$";
                                v.AssignedPluralName = $if(class.AssignedPluralName)$"$class.AssignedPluralName$"$else$null$endif$;
                        });
>>

build_relations(composite) ::= <<
            // $composite.SingularName$
$composite.DefinedProperties:{property|$build_relation(property)$}; separator="\n"$

>>

build_relation(property) ::= <<
            relationTypes.$property.DefiningType.SingularName$$property.RoleName$ = new Meta$property.DefiningType.SingularName$$property.RoleName$(meta, Ids.$property.DefiningType.SingularName$$property.RoleName$, $if(property.AssignedMultiplicity)$Allors.Multiplicity.$property.AssignedMultiplicity$$else$null$endif$, $if(property.AttributeByName.Derived)$$property.AttributeByName.Derived.Value$$else$false$endif$);
>>

assign_properties(composite) ::= <<
$composite.DefinedProperties:{property|$assign_relationEndType(property)$}; separator="\n"$
$composite.InheritedProperties:{property|$assign_inheritedrelationEndType(property)$}; separator="\n"$
$composite.DefinedReverseProperties:{property|$assign_reverserelationEndType(property)$}; separator="\n"$
$composite.InheritedReverseProperties:{property|$assign_inheritedreverserelationEndType(property)$}; separator="\n"$
>>

assign_relationEndType(property) ::= <<
                meta.$composite.SingularName$.$property.RoleName$ = relationTypes.$property.DefiningType.SingularName$$property.RoleName$.RoleType;
>>

assign_inheritedrelationEndType(property) ::= <<
$if(property.DefiningProperty)$                meta.$composite.SingularName$.$property.DefiningProperty.RoleName$ = relationTypes.$property.DefiningProperty.DefiningType.SingularName$$property.DefiningProperty.RoleName$.RoleType;
$else$                meta.$composite.SingularName$.$property.RoleName$ = relationTypes.$property.DefiningType.SingularName$$property.RoleName$.RoleType;
$endif$
>>

assign_reverserelationEndType(property) ::= <<
                meta.$composite.SingularName$.$property.AssociationName$ = relationTypes.$property.DefiningType.SingularName$$property.RoleName$.AssociationType;
>>

assign_inheritedreverserelationEndType(property) ::= <<
$if(property.DefiningProperty)$                meta.$composite.SingularName$.$property.AssociationName$ = relationTypes.$property.DefiningProperty.DefiningType.SingularName$$property.DefiningProperty.RoleName$.AssociationType;
$else$                meta.$composite.SingularName$.$property.AssociationName$ = relationTypes.$property.DefiningType.SingularName$$property.RoleName$.AssociationType;
$endif$
>>

assign_methods(composite) ::= <<
$composite.DefinedMethods:{method|$assign_methodType(method)$}; separator="\n"$
$composite.InheritedMethods:{method|$assign_inheritedmethodType(method)$}; separator="\n"$
>>

assign_methodType(method) ::= <<
                meta.$composite.SingularName$.$method.Name$ = methodTypes.$method.DefiningType.SingularName$$method.Name$;
>>

assign_inheritedmethodType(method) ::= <<
                meta.$composite.SingularName$.$method.Name$ = methodTypes.$method.DefiningMethod.DefiningType.SingularName$$method.Name$;
>>

build_methods(composite) ::= <<$composite.DefinedMethods:{method|$build_method(method)$}; separator="\n"$>>
build_method(method) ::= <<
            methodTypes.$method.DefiningType.SingularName$$method.Name$ = new MethodType(meta.$method.DefiningType.SingularName$, Ids.$method.DefiningType.SingularName$$method.Name$, "$method.Name$")$if(method.MethodTypeExtensionAttributes || method.CompositeMethodTypeExtensionAttributes)$ { $if(method.MethodTypeExtensionAttributes)$Attributes = { $method.MethodTypeExtensionAttributes:{attribute|$attribute.Name$ = $attribute.Value$}; separator=", "$ }$if(method.MethodTypeExtensionAttributes && method.CompositeMethodTypeExtensionAttributes)$,$endif$$endif$$if(method.CompositeMethodTypeExtensionAttributes)$ CompositeMethodType = { Attributes = { $method.CompositeMethodTypeExtensionAttributes:{attribute|$attribute.Name$ = $attribute.Value$}; separator=", "$ } } $endif$  } $endif$;
>>

extend_compositeRoleTypes(relationType) ::= <<
$composite.InheritedProperties:{property|$extend_compositeRoleType(property)$}; separator="\n"$
>>

extend_compositeRoleType(property) ::= <<
$property.ExtensionAttributes:{attribute|$extend_compositeRoleType_attribute(attribute)$}; separator="\n"$
>>

extend_compositeRoleType_attribute(attribute) ::= <<
$if(property.DefiningProperty)$
            relationTypes.$property.DefiningProperty.DefiningType.ObjectType.SingularName$$property.RoleName$.RoleType.CompositeRoleTypeByComposite[meta.$composite.SingularName$].Attributes.$attribute.Name$ = $attribute.Value$;
$endif$
>>

extend_compositeMethodTypes(relationType) ::= <<
$composite.InheritedMethods:{method|$extend_compositeMethodType(method)$}; separator="\n"$
>>

extend_compositeMethodType(method) ::= <<
$method.ExtensionAttributes:{attribute|$extend_compositeMethodType_attribute(attribute)$}; separator="\n"$
>>

extend_compositeMethodType_attribute(attribute) ::= <<
$if(method.DefiningMethod)$
            methodTypes.$method.DefiningMethod.DefiningType.ObjectType.SingularName$$method.MethodName$.MethodType.CompositeMethodTypeByComposite[meta.$composite.SingularName$].Attributes.$attribute.Name$ = $attribute.Value$;
$endif$
>>


boolean(value) ::= "$if(value)$true$else$false$endif$"
