group AllorsCSharpRepository;

TemplateId() ::= <<14F49218-A676-43ba-9CBD-B8FFA059D1BF>>
TemplateName() ::= <<Allors C# Meta>>
TemplateVersion() ::= <<3.0.2>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(repository) ::= <<
$!
Copyright 2002-2022 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
    <generation template="ids" output="ids.g.cs"/>
    <generation template="builder" output="builder.g.cs"/>
</generations>
>>

ids(repository) ::= <<
namespace Allors.Database.Meta.Configuration
{
    using System;

    public partial class Ids {
        // Domains
$repository.Domains:{assembly|$ids_domain(assembly)$}; separator="\n"$

        // Units
$repository.Units:{unit|$ids_unit(unit)$}; separator="\n"$

        // Composites & Relations
$repository.composites:{composite|$ids_composite(composite)$}; separator="\n"$
    }
}
>>

ids_domain(composite) ::= <<
        public static readonly Guid $assembly.Name$ = new Guid("$assembly.Id$");
>>

ids_unit(composite) ::= <<
        public static readonly Guid $unit.SingularName$ = new Guid("$unit.Id$");
>>

ids_composite(composite) ::= <<
        public static readonly Guid $composite.SingularName$ = new Guid("$composite.Id$");
$composite.DefinedProperties:{property|$ids_composite_property(property)$}; separator="\n"$
$composite.DefinedMethods:{method|$ids_composite_methodType(method)$}; separator="\n"$

>>

ids_composite_property(property) ::= <<
        public static readonly Guid $composite.SingularName$$property.RoleName$ = new Guid("$property.Id$");
        public static readonly Guid $property.AssociationName$ = new Guid("$property.AssociationId$");
>>

ids_composite_methodType(method) ::= <<
        public static readonly Guid $composite.SingularName$$method.Name$ = new Guid("$method.Id$");
>>

builder(repository) ::= <<
// <auto-generated />
namespace Allors.Database.Meta.Configuration
{
	public partial class MetaBuilder
	{
        #region Domains
        internal class Domains
        {
$repository.Domains:{assembly|              public Domain $assembly.Name$;}; separator="\n"$
        }
        #endregion

	#region ObjectTypes
        public sealed class ObjectTypes 
        {
                // Units
$repository.Units:{unit|$define_units(unit)$}; separator="\n"$

                // Interfaces
$repository.Interfaces:{interface|$define_interfaces(interface)$}; separator="\n"$

                // Classes
$repository.Classes:{class|$define_classes(class)$}; separator="\n"$
        }
        #endregion

        #region RoleTypes
        internal class RoleTypes
        {
$repository.Composites:{composite|$define_relationTypes(composite)$}; separator="\n"$
        }
        #endregion

        #region MethodTypes
        internal class MethodTypes
        {
$repository.Composites:{composite|$define_methods(composite)$}; separator="\n"$
        }
        #endregion

        public MetaPopulation Build() {
            var meta =  new MetaPopulation();
            var domains = new Domains();
            var objectTypes = new ObjectTypes();
            var roleTypes = new RoleTypes();
            var methodTypes = new MethodTypes();

            this.BuildDomains(meta, domains);
            this.BuildUnits(meta, objectTypes);
            this.BuildInterfaces(meta, objectTypes);
            this.BuildClasses(meta, objectTypes);
            this.BuildRoleTypes(meta, domains, objectTypes, roleTypes);
            this.BuildMethodTypes(meta, domains, objectTypes, methodTypes);

            meta.Initialize();

            this.ExtendCompositeRoleTypes(meta, roleTypes);
            this.ExtendCompositeMethodTypes(meta, methodTypes);

$repository.Domains:{assembly|             this.Build$assembly.Name$(meta, domains, objectTypes, roleTypes, methodTypes);}; separator="\n"$

            meta.Derive();

            return meta;
        }

        private void BuildDomains(MetaPopulation meta, Domains domains)
        {
$repository.Domains:{assembly|$build_domain(assembly)$}; separator="\n"$
        }

        private void BuildUnits(MetaPopulation meta, ObjectTypes objectTypes)
        {
$repository.Units:{unit|$build_unit(unit)$}; separator="\n"$
        }

        private void BuildInterfaces(MetaPopulation meta, ObjectTypes objectTypes)
        {
$repository.Interfaces:{interface|$build_interface(interface)$}; separator="\n"$
        }

        private void BuildClasses(MetaPopulation meta, ObjectTypes objectTypes)
        {
$repository.Classes:{class|$build_class(class)$}; separator="\n"$
        }

        private void BuildRoleTypes(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RoleTypes roleTypes)
        {
$repository.Composites:{composite|$build_relations(composite)$}; separator="\n"$
        }

        private void BuildMethodTypes(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, MethodTypes methodTypes)
        {
$repository.Composites:{composite|$build_methods(composite)$}; separator="\n"$
        }

        private void ExtendCompositeRoleTypes(MetaPopulation meta, RoleTypes roleTypes)
        {
$repository.Composites:{composite|$extend_compositeRoleTypes(composite)$}; separator="\n"$
        }

        private void ExtendCompositeMethodTypes(MetaPopulation meta, MethodTypes methodTypes)
        {
$repository.Composites:{composite|$extend_compositeMethodTypes(composite)$}; separator="\n"$
        }
	}
}
>>

define_units(unit) ::= <<
                public Unit $unit.SingularName$ { get; set; }
>>

define_interfaces(interface) ::= <<
                public Interface $interface.SingularName$ { get; set; }
>>

define_classes(class) ::= <<
                public Class $class.SingularName$ { get; set; }
>>

define_relationTypes(composite) ::= <<
$composite.DefinedProperties:{property|             public RoleType $property.DefiningType.SingularName$$property.RoleName$;}; separator="\n"$
>>

define_roleClasses(class) ::= <<
$class.ImplementedProperties:{property|             public RoleClass $class.SingularName$$property.RoleName$;}; separator="\n"$
>>

assign_roleClasses(class) ::= <<
$class.ImplementedProperties:{property|                 Metathis.$class.SingularName$$property.RoleName$ = roleTypes.$property.DefiningProperty.DefiningType.SingularName$$property.DefiningProperty.RoleName$.RoleClassBy(objectTypes.$class.SingularName$);}; separator="\n"$
>>

define_methods(composite) ::= <<
$composite.DefinedMethods:{method|          public MethodType $method.DefiningType.SingularName$$method.Name$;}; separator="\n"$
>>

build_domain(assembly) ::= <<
	        domains.$assembly.Name$ = meta.Create<Domain>(v=>
                        {
                                v.Id = Ids.$assembly.Name$; 
                                v.Tag = v.Id.Tag();
                                v.Name = "$assembly.Name$"; 
                                v.DirectSuperdomains = new Domain[]{$assembly.DirectSuperdomains:{superdomain|domains.$superdomain.Name$}; separator=","$};
                        });
	        {
$if(assembly.ExtensionAttributes)$
                domains.$assembly.Name$.Attributes = { $assembly.ExtensionAttributes:{attribute|$attribute.Name$ = $attribute.Value$}; separator=", "$ }
$endif$
	        };
>>

build_unit(unit) ::= <<
            objectTypes.$unit.SingularName$ = meta.Create<Unit>(v=>
            {
                v.Id = Ids.$unit.SingularName$; 
                v.Tag = UnitTags.$unit.SingularName$;
                v.SingularName = UnitNames.$unit.SingularName$; 
            });
>>

build_interface(interface) ::= <<
                objectTypes.$interface.SingularName$ = meta.Create<Interface>(v=>
                        {
                                v.Id = Ids.$interface.SingularName$; 
                                v.Tag = v.Id.Tag();
                                v.DirectSupertypes = new Interface[]{$interface.ImplementedInterfaces:{implementedInterface|objectTypes.$implementedInterface.SingularName$}; separator=", "$}; 
                                v.SingularName = "$interface.SingularName$";
                                v.AssignedPluralName = $if(interface.AssignedPluralName)$"$interface.AssignedPluralName$"$else$null$endif$;
                        });
>>

build_class(class) ::= <<
                objectTypes.$class.SingularName$ = meta.Create<Class>(v=>
                        {
                                v.Id = Ids.$class.SingularName$; 
                                v.Tag = v.Id.Tag();
                                v.DirectSupertypes = new Interface[]{$class.ImplementedInterfaces:{implementedInterface|objectTypes.$implementedInterface.SingularName$}; separator=", "$}; 
                                v.SingularName = "$class.SingularName$";
                                v.AssignedPluralName = $if(class.AssignedPluralName)$"$class.AssignedPluralName$"$else$null$endif$;
                        });
>>

build_relations(composite) ::= <<
            // $composite.SingularName$
$composite.DefinedProperties:{property|$build_relation(property)$}; separator="\n"$

>>

build_relation(property) ::= <<
            {
                var associationType = meta.Create<AssociationType>(v=>
                {
                     v.Id = Ids.$property.AssociationName$;
                     v.Tag = v.Id.Tag();
                     v.Composite = objectTypes.$property.DefiningType.SingularName$;

                    // Attributes
                    $property.AssociationTypeExtensionAttributes:{attribute|v.$attribute.Name$ = $attribute.Value$;}; separator="\n"$ 
                });

                var roleType = meta.Create<RoleType>(v=>
                {
                    v.Id = Ids.$property.DefiningType.SingularName$$property.RoleName$;
                    v.Tag = v.Id.Tag();
                    v.ObjectType = objectTypes.$property.ObjectType.SingularName$;
$if(property.AssignedRoleSingularName)$                 v.AssignedSingularName = "$property.RoleSingularName$";$endif$
$if(property.AssignedRolePluralName)$                   v.AssignedPluralName = "$property.RolePluralName$";$endif$
$if(property.AttributeByName.Size)$                     v.Size = $property.AttributeByName.Size.Value$;$endif$
$if(property.AttributeByName.Precision)$                 v.Precision = $property.AttributeByName.Precision.Value$;$endif$
$if(property.AttributeByName.Scale)$                    v.Scale = $property.AttributeByName.Scale.Value$;$endif$
                    v.AssignedMultiplicity = $if(property.AssignedMultiplicity)$Allors.Multiplicity.$property.AssignedMultiplicity$$else$null$endif$;
                    v.IsDerived = $if(property.AttributeByName.Derived)$$property.AttributeByName.Derived.Value$$else$false$endif$;

                    v.AssociationType = associationType;

                    // Attributes
                    $property.RelationTypeExtensionAttributes:{attribute|v.$attribute.Name$ = $attribute.Value$;}; separator="\n"$
                    $property.RoleTypeExtensionAttributes:{attribute|v.$attribute.Name$ = $attribute.Value$;}; separator="\n"$
                });

                roleType.CompositeRoleType = new CompositeRoleType(associationType.Composite, roleType);
$property.CompositeRoleTypeExtensionAttributes:{attribute|              roleType.CompositeRoleType.$attribute.Name$ = $attribute.Value$;}; separator="\n"$  

                associationType.RoleType = roleType;
                roleTypes.$property.DefiningType.SingularName$$property.RoleName$ = roleType; 
            }
>>

build_methods(composite) ::= <<$composite.DefinedMethods:{method|$build_method(method)$}; separator="\n"$>>
build_method(method) ::= <<
                methodTypes.$method.DefiningType.SingularName$$method.Name$ = meta.Create<MethodType>(v=>
                        {
                                v.Id = Ids.$method.DefiningType.SingularName$$method.Name$; 
                                v.Tag = v.Id.Tag();
                                v.ObjectType = objectTypes.$method.DefiningType.SingularName$; 
                                v.Name = "$method.Name$";
                                v.CompositeMethodType = new CompositeMethodType(v.ObjectType, v);
                        });
$if(method.MethodTypeExtensionAttributes)$
                methodTypes.$method.DefiningType.SingularName$$method.Name$.Attributes = { $method.MethodTypeExtensionAttributes:{attribute|$attribute.Name$ = $attribute.Value$}; separator=", "$ }
$endif$
$if(method.CompositeMethodTypeExtensionAttributes)$
        methodTypes.$method.DefiningType.SingularName$$method.Name$.CompositeMethodType.Attributes = { $method.CompositeMethodTypeExtensionAttributes:{attribute|$attribute.Name$ = $attribute.Value$}; separator=", "$ };
$endif$ 

>>

extend_compositeRoleTypes(relationType) ::= <<
$composite.InheritedProperties:{property|$extend_compositeRoleType(property)$}; separator="\n"$
>>

extend_compositeRoleType(property) ::= <<
$property.ExtensionAttributes:{attribute|$extend_compositeRoleType_attribute(attribute)$}; separator="\n"$
>>

extend_compositeRoleType_attribute(attribute) ::= <<
$if(property.DefiningProperty)$
            roleTypes.$property.DefiningProperty.DefiningType.ObjectType.SingularName$$property.RoleName$.RoleType.CompositeRoleTypeByComposite[objectTypes.$composite.SingularName$].$attribute.Name$ = $attribute.Value$;
$endif$
>>

extend_compositeMethodTypes(relationType) ::= <<
$composite.InheritedMethods:{method|$extend_compositeMethodType(method)$}; separator="\n"$
>>

extend_compositeMethodType(method) ::= <<
$method.ExtensionAttributes:{attribute|$extend_compositeMethodType_attribute(attribute)$}; separator="\n"$
>>

extend_compositeMethodType_attribute(attribute) ::= <<
$if(method.DefiningMethod)$
            methodTypes.$method.DefiningMethod.DefiningType.ObjectType.SingularName$$method.MethodName$.MethodType.CompositeMethodTypeByComposite[objectTypes.$composite.SingularName$].$attribute.Name$ = $attribute.Value$;
$endif$
>>


boolean(value) ::= "$if(value)$true$else$false$endif$"
