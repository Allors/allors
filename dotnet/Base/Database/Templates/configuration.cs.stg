delimiters "$", "$"

TemplateId() ::= <<17ED40F8-BDF8-4A7C-9AE9-1C4D2AD6BA2B>>
TemplateName() ::= <<Allors C# Configuration>>
TemplateVersion() ::= <<3.0.3>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta) ::= <<
$!
Copyright 2002-2022 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	<generation template="metaIndex" output="MetaIndex.g.cs"/>
</generations>
>>

metaIndex(meta) ::= <<
namespace Allors.Database.Domain
{
    using Meta;

    public sealed class MetaIndex : IMetaIndex
    {
		private readonly MetaPopulation meta;

		// Units
$meta.units:{objectType|$metaObjectType_Field()$}; separator="\n"$

		// Interfaces
$meta.interfaces:{objectType|$metaObjectType_Field()$}; separator="\n"$

		// Classes
$meta.classes:{objectType|$metaObjectType_Field()$}; separator="\n"$

		// RoleType
$meta.relationTypes:{relationType|$metaRoleType_Field()$}; separator="\n"$

		// AssociationType
$meta.relationTypes:{relationType|$metaAssociationType_Field()$}; separator="\n"$

		public MetaIndex(IMetaPopulation meta)
		{
			this.meta = meta;

			// Units
$meta.units:{objectType|$metaUnit_Init()$}; separator="\n"$

			// Interfaces
$meta.interfaces:{objectType|$metaInterface_Init()$}; separator="\n"$

			// Classes
$meta.classes:{objectType|$metaClass_Init()$}; separator="\n"$

			// RoleTypes
$meta.relationTypes:{relationType|$metaRoleType_Init()$}; separator="\n"$
	
			// AssociationTypes
$meta.relationTypes:{relationType|$metaAssociationType_Init()$}; separator="\n"$

			// Interface Properties
$meta.interfaces:{objectType|$metaInterface_Init_Properties()$}; separator="\n"$

			// Class Properties
$meta.classes:{objectType|$metaClass_Init_Properties()$}; separator="\n"$

			// RoleType Properties
$meta.relationTypes:{relationType|$metaRoleType_Init_Properties()$}; separator="\n"$
			// AssociationType Properties
$meta.relationTypes:{relationType|$metaAssociationType_Init_Properties()$}; separator="\n"$
		}

        public IMetaPopulation Meta => meta;

		// Units
$meta.units:{objectType|$metaObjectType_Property()$}; separator="\n"$

		// Interfaces
$meta.interfaces:{objectType|$metaObjectType_Property()$}; separator="\n"$

		// Classes
$meta.classes:{objectType|$metaObjectType_Property()$}; separator="\n"$

		// RoleType
$meta.relationTypes:{relationType|$metaRoleType_Property()$}; separator="\n"$

		// AssociationType
$meta.relationTypes:{relationType|$metaAssociationType_Property()$}; separator="\n"$
    }

$meta.units:{unit|$metaUnit_Type()$}; separator="\n"$
$meta.interfaces:{interface|$metaInterface_Type()$}; separator="\n"$
$meta.classes:{class|$metaClass_Type()$}; separator="\n"$
$meta.relationTypes:{relationType|$metaAssociationType_Type()$}; separator="\n"$
$meta.relationTypes:{relationType|$metaRoleType_Type()$}; separator="\n"$
}
>>

metaUnit_Init() ::= <<
			this._$objectType.SingularName$ = new $objectType.SingularName$Index { Meta = (Unit)meta.FindById(MetaIds.$objectType.SingularName$) };
>>

metaInterface_Init() ::= <<
			this._$objectType.SingularName$ = new $objectType.SingularName$Index { Meta = (Interface)meta.FindById(MetaIds.$objectType.SingularName$) };
>>

metaClass_Init() ::= <<
			this._$objectType.SingularName$ = new $objectType.SingularName$Index { Meta = (Class)meta.FindById(MetaIds.$objectType.SingularName$) };
>>

metaRoleType_Init() ::= <<
			this._$relationType.RoleType.FullName$ = new $relationType.RoleType.FullName$Index { Meta = ((RelationType)meta.FindById(MetaIds.$relationType.RoleType.FullName$)).RoleType };
>>

metaAssociationType_Init() ::= <<
			this._$relationType.AssociationType.Name$ = new $relationType.AssociationType.Name$Index { Meta = ((RelationType)meta.FindById(MetaIds.$relationType.RoleType.FullName$)).AssociationType };
>>

metaInterface_Init_Properties() ::= <<
$objectType.Subtypes:{subtype|$metaInterface_Init_Properties_Subtype()$}; separator="\n"$
$objectType.RoleTypes:{roleType|$metaObjectType_Init_Properties_RoleType()$}; separator="\n"$
$objectType.AssociationTypes:{associationType|$metaObjectType_Init_Properties_AssociationType()$}; separator="\n"$
>>

metaClass_Init_Properties() ::= <<
$objectType.RoleTypes:{roleType|$metaObjectType_Init_Properties_RoleType()$}; separator="\n"$
$objectType.AssociationTypes:{associationType|$metaObjectType_Init_Properties_AssociationType()$}; separator="\n"$
>>

metaRoleType_Init_Properties() ::= <<
$if(relationType.RoleType.ObjectType.IsComposite)$
			this._$relationType.RoleType.FullName$.ObjectType = this.$relationType.RoleType.ObjectType.SingularName$;
			this._$relationType.RoleType.FullName$.AssociationType = this.$relationType.AssociationType.Name$;
$endif$
>>

metaAssociationType_Init_Properties() ::= <<
			this._$relationType.AssociationType.Name$.ObjectType = this.$relationType.AssociationType.ObjectType.SingularName$;
			this._$relationType.AssociationType.Name$.RoleType = this.$relationType.RoleType.FullName$;
>>

metaInterface_Init_Properties_Subtype() ::= <<
			this._$objectType.SingularName$.As$subtype.SingularName$ = this.$subtype.SingularName$;
>>

metaObjectType_Init_Properties_RoleType() ::= <<
			this._$objectType.SingularName$.$roleType.Name$ = this.$roleType.FullName$;
>>

metaObjectType_Init_Properties_AssociationType() ::= <<
			this._$objectType.SingularName$.$associationType.Name$ = this.$associationType.Name$;
>>

metaObjectType_Field() ::= <<
        private readonly $objectType.SingularName$Index _$objectType.SingularName$;
>>

metaRoleType_Field() ::= <<
		private readonly $relationType.RoleType.FullName$Index _$relationType.RoleType.FullName$;
>>

metaAssociationType_Field() ::= <<
		private readonly $relationType.AssociationType.Name$Index _$relationType.AssociationType.Name$;
>>

metaObjectType_Property() ::= <<
        public I$objectType.SingularName$Index $objectType.SingularName$ => this._$objectType.SingularName$;

>>

metaRoleType_Property() ::= <<
		public I$relationType.RoleType.FullName$Index $relationType.RoleType.FullName$ => this._$relationType.RoleType.FullName$;

>>

metaAssociationType_Property() ::= <<
		public I$relationType.AssociationType.Name$Index $relationType.AssociationType.Name$ => this._$relationType.AssociationType.Name$;

>>

metaUnit_Type() ::= <<
	public class $unit.SingularName$Index : I$unit.SingularName$Index 
	{
		public Unit Meta { get; internal set; }
	}

>>

metaInterface_Type() ::= <<
	public class $interface.SingularName$Index : I$interface.SingularName$Index
	{
		public Interface Meta { get; internal set; }

$interface.Subtypes:{subtype|$metaObjectType_Subtype()$}; separator="\n"$
$interface.RoleTypes:{roleType|$metaObjectType_RoleType()$}; separator="\n"$
$interface.AssociationTypes:{associationType|$metaObjectType_AssociationType()$}; separator="\n"$
	}

>>

metaClass_Type() ::= <<
	public class $class.SingularName$Index : I$class.SingularName$Index
	{
		public Class Meta { get; internal set; }

$class.RoleTypes:{roleType|$metaObjectType_RoleType()$}; separator="\n"$
$class.AssociationTypes:{associationType|$metaObjectType_AssociationType()$}; separator="\n"$
	}

>>

metaObjectType_Subtype() ::= <<
		public I$subtype.SingularName$Index As$subtype.SingularName$ { get; internal set; }
>>

metaObjectType_RoleType() ::= <<
		public I$roleType.FullName$Index $roleType.Name$ { get; internal set; }


>>

metaObjectType_AssociationType() ::= <<
		public I$associationType.Name$Index $associationType.Name$ { get; internal set; }
>>

metaRoleType_Type() ::= <<
	public class $relationType.RoleType.FullName$Index : I$relationType.RoleType.FullName$Index
	{
		public RoleType Meta { get; internal set; }

$if(relationType.RoleType.ObjectType.IsComposite)$	
	public I$relationType.RoleType.ObjectType$Index ObjectType { get; internal set; }

	public I$relationType.AssociationType.Name$Index AssociationType { get; internal set; }
$endif$
	}
>>

metaAssociationType_Type() ::= <<
	public class $relationType.AssociationType.Name$Index : I$relationType.AssociationType.Name$Index
	{
		public AssociationType Meta { get; internal set; }

		public I$relationType.AssociationType.ObjectType$Index ObjectType { get; internal set; }

		public I$relationType.RoleType.FullName$Index RoleType { get; internal set; }
	}

>>
boolean(value) ::= "$if(value)$true$else$false$endif$"
