delimiters "$", "$"

TemplateId() ::= <<17ED40F8-BDF8-4A7C-9AE9-1C4D2AD6BA2B>>
TemplateName() ::= <<Allors C# Domain>>
TemplateVersion() ::= <<3.0.5>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta) ::= <<
$!
Copyright 2002-2022 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	<generation template="metaIds" output="MetaIds.g.cs"/>
	<generation template="metaIndex" output="MetaIndex.g.cs"/>
</generations>
>>

metaIds(meta) ::= <<
namespace Allors.Database.Domain
{
    using System;

    public static class MetaIds 
	{
		// Units
$meta.units:{objectType|$metaObjectType_Id()$}; separator="\n"$

		// Interfaces
$meta.interfaces:{objectType|$metaObjectType_Id()$}; separator="\n"$

		// Classes
$meta.classes:{objectType|$metaObjectType_Id()$}; separator="\n"$
	
		// RelationTypes
$meta.relationTypes:{relationType|$metaRelationType_Id()$}; separator="\n"$

		// MethodTypes
$meta.methodTypes:{methodType|$metaMethodType_Id()$}; separator="\n"$
    }
}
>>

metaObjectType_Id() ::= <<
		public static readonly Guid $objectType.SingularName$ = new Guid("$objectType.Id$");
>>

metaRelationType_Id() ::= <<
		public static readonly Guid $relationType.RoleType.FullName$ = new Guid("$relationType.Id$");
>>

metaMethodType_Id() ::= <<
		public static readonly Guid $methodType.FullName$ = new Guid("$methodType.Id$");
>>

metaIndex(meta) ::= <<
namespace Allors.Database.Domain
{
    using Meta;

    public interface IMetaIndex : IMetaPopulationIndex
    {
$meta.units:{objectType|$metaObjectType_Property()$}; separator="\n"$
$meta.interfaces:{objectType|$metaObjectType_Property()$}; separator="\n"$
$meta.classes:{objectType|$metaObjectType_Property()$}; separator="\n"$
$meta.relationTypes:{relationType|$metaRoleType_Property()$}; separator="\n"$
$meta.relationTypes:{relationType|$metaAssociationType_Property()$}; separator="\n"$
$meta.methodTypes:{methodType|$metaMethodType_Property()$}; separator="\n"$
    }

$meta.units:{unit|$metaUnit_Type()$}; separator="\n"$
$meta.interfaces:{interface|$metaInterface_Type()$}; separator="\n"$
$meta.classes:{class|$metaClass_Type()$}; separator="\n"$
$meta.relationTypes:{relationType|$metaRoleType_Type()$}; separator="\n"$
$meta.relationTypes:{relationType|$metaAssociationType_Type()$}; separator="\n"$
$meta.methodTypes:{methodType|$metaMethodType_Type()$}; separator="\n"$
}
>>

metaObjectType_Property() ::= <<
		$objectType.SingularName$Index $objectType.SingularName$ { get; set; }

>>

metaRoleType_Property() ::= <<
		$relationType.RoleType.FullName$Index $relationType.RoleType.FullName$ { get; set; }

>>

metaAssociationType_Property() ::= <<
		$relationType.AssociationType.Name$Index $relationType.AssociationType.Name$ { get; set; }

>>

metaMethodType_Property() ::= <<
		$methodType.FullName$Index $methodType.FullName$ { get; set; }

>>

metaUnit_Type() ::= <<
	public class $unit.SingularName$Index(Unit meta) : UnitIndex 
	{
		public override Unit Unit => meta;
	}

>>

metaInterface_Type() ::= <<
	public class $interface.SingularName$Index(Interface meta) : InterfaceIndex
	{
		public override Composite Composite => meta;

		public override Interface Interface => meta;

$interface.Subtypes:{subtype|$metaObjectType_Subtype()$}; separator="\n"$
$interface.RoleTypes:{roleType|$metaObjectType_RoleType()$}; separator="\n"$
$interface.AssociationTypes:{associationType|$metaObjectType_AssociationType()$}; separator="\n"$
$interface.MethodTypes:{methodType|$metaObjectType_MethodType()$}; separator="\n"$
	}

>>

metaClass_Type() ::= <<
	public class $class.SingularName$Index(Class meta) : ClassIndex
	{
		public override Composite Composite => meta;
		
		public override Class Class => meta;

$class.RoleTypes:{roleType|$metaObjectType_RoleType()$}; separator="\n"$
$class.AssociationTypes:{associationType|$metaObjectType_AssociationType()$}; separator="\n"$
$class.MethodTypes:{methodType|$metaObjectType_MethodType()$}; separator="\n"$
	}

>>

metaObjectType_Subtype() ::= <<
		public $subtype.SingularName$Index As$subtype.SingularName$ { get; set; }
>>

metaObjectType_RoleType() ::= <<
		public $roleType.FullName$Index $roleType.Name$ { get; set; }
>>

metaObjectType_AssociationType() ::= <<
		public $associationType.Name$Index $associationType.Name$ { get; set; }
>>

metaObjectType_MethodType() ::= <<
		public $methodType.FullName$Index $methodType.Name$ { get; set; }
>>

metaRoleType_Type() ::= <<
	public class $relationType.RoleType.FullName$Index(RoleType meta) : RoleTypeIndex
	{
	    public override OperandType OperandType => meta;

	    public override RelationEndType RelationEndType => meta;

        public override RoleType RoleType => meta;

$if(relationType.RoleType.ObjectType.IsComposite)$	
	public $relationType.RoleType.ObjectType$Index ObjectType { get; set; }

	public $relationType.AssociationType.Name$Index AssociationType { get; set; }
$endif$
	}
>>

metaAssociationType_Type() ::= <<
	public class $relationType.AssociationType.Name$Index(AssociationType meta) : AssociationTypeIndex
	{
	    public override OperandType OperandType => meta;

		public override RelationEndType RelationEndType => meta;

		public override AssociationType AssociationType => meta;

		public $relationType.AssociationType.ObjectType$Index ObjectType { get; set; }

		public $relationType.RoleType.FullName$Index RoleType { get; set; }
	}

>>

metaMethodType_Type() ::= <<
	public class $methodType.FullName$Index(MethodType meta) : MethodTypeIndex
	{
	    public override OperandType OperandType => meta;

		public override MethodType MethodType => meta;

		public $methodType.ObjectType$Index ObjectType { get; set; }
	}

>>

boolean(value) ::= "$if(value)$true$else$false$endif$"