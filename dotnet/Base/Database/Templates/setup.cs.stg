delimiters "$", "$"

TemplateId() ::= <<17ED40F8-BDF8-4A7C-9AE9-1C4D2AD6BA2B>>
TemplateName() ::= <<Allors C# Domain>>
TemplateVersion() ::= <<3.0.2>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta) ::= <<
$!
Copyright 2002-2022 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	$meta.Interfaces:{interface|<generation template="castInterface" input="$interface.Id$" output="$interface.SingularName$.g.cs"/>}$
	$meta.Classes:{class|<generation template="castClass" input="$class.Id$" output="$class.SingularName$.g.cs"/>}$
</generations>
>>

castInterface(meta, objectType) ::= <<
$interface(meta,objectType)$
>>

interface(meta, interface) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Database.Domain
{
$objectType_Plural()$
}
>>

castClass(meta, objectType) ::= <<
$class(meta,objectType)$
>>

class(meta,class) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Database.Domain
{
$objectType_Plural()$
}
>>

objectType_Plural() ::= <<
	public partial class $objectType.pluralName$ : global::Allors.Database.Domain.ObjectsBase<$objectType.singularName$>
	{
		public $objectType.pluralName$(Allors.Database.ITransaction transaction) : base(transaction)
		{
		}

		public Allors.Database.Meta.IMeta$objectType.SingularName$ Meta
		{
			get
			{
				return this.M.$objectType.SingularName$;
			}
		}

		public override Allors.Database.Meta.$if(objectType.IsClass)$IClass$else$IInterface$endif$ ObjectType
		{
			get
			{
				return Meta;
			}
		}
$if(objectType.isClass)$
$objectType.KeyRoleTypes:{roleType|$cacheClassKeyRoleTypes()$}$
$endif$
	}
>>

cacheClassKeyRoleTypes() ::= <<
			public ICache<$roleType_ObjectType(roleType)$, $objectType.SingularName$> By$roleType.SingularName$ => this.Transaction.Caches().$objectType.SingularName$By$roleType.SingularName$();
>>

boolean(value) ::= "$if(value)$true$else$false$endif$"

roleType_ObjectType(roleType) ::= <%
$if(roleType.IsRequired)$
$objectType_Name(roleType.ObjectType)$
$else$
$objectType_NullableName(roleType.ObjectType)$
$endif$
%>

roleClass_ObjectType(compositeRoleType) ::= <%
$if(compositeRoleType.IsRequired)$
$objectType_Name(compositeRoleType.RoleType.ObjectType)$
$else$
$objectType_NullableName(compositeRoleType.RoleType.ObjectType)$
$endif$
%>

objectType_Name(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean
$elseif(objectType.IsDecimal)$
	global::System.Decimal
$elseif(objectType.IsDateTime)$
	global::System.DateTime
$elseif(objectType.IsFloat)$
	global::System.Double
$elseif(objectType.IsInteger)$
	global::System.Int32
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid
$else$
not found ...
$endif$
$else$
	$objectType.SingularName$
$endif$
%>

objectType_NullableName(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean?
$elseif(objectType.IsDecimal)$
	global::System.Decimal?
$elseif(objectType.IsDateTime)$
	global::System.DateTime?
$elseif(objectType.IsFloat)$
	global::System.Double?
$elseif(objectType.IsInteger)$
	global::System.Int32?
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid?
$else$
not found ...
$endif$
$else$
	$objectType.SingularName$
$endif$
%>
