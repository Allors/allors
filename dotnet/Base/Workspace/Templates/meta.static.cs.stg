group AllorsCSharpRepository;

TemplateId() ::= <<7B7D955D-7C87-4198-A40D-4B70CABC7525>>
TemplateName() ::= <<Allors C# Workspace Meta>>
TemplateVersion() ::= <<3.0.3>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta, workspaceName) ::= <<
$!
Copyright 2002-2022 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
    <generation template="m" output="m.g.cs"/>
	<generation template="units" output="units.g.cs"/>
	<generation template="interfaces" output="interfaces.g.cs"/>
	<generation template="classes" output="classes.g.cs"/>
    <generation template="builder" output="builder.g.cs"/>
</generations>
>>

m(meta, workspaceName) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Meta.Static
{
    public sealed class MetaPopulation : Allors.Workspace.Meta.MetaPopulation, M
    {
        // Units
$meta.Units:{unit|        public Meta$unit.SingularName$ $unit.SingularName$ { get; \}}; separator="\n"$

        // Interfaces
$meta.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|        public Meta$interface.SingularName$ $interface.SingularName$ { get; \}}; separator="\n"$

        // Classes
$meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|        public Meta$class.SingularName$ $class.SingularName$ { get; \}}; separator="\n"$

        #region Interface implementations
        // Units
$meta.Units:{unit|$m_unit_implementation(unit)$}; separator="\n"$

        // Interfaces
$meta.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|$m_interface_implementation(interface)$}; separator="\n"$

        // Classes
$meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|$m_class_implementation(class)$}; separator="\n"$
        #endregion
        
        internal MetaPopulation()
        {
            // Units
$meta.Units:{unit|$m_unit(unit)$}; separator="\n"$

            // Interfaces
$meta.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|$m_interface(interface)$}; separator="\n"$

            // Classes
$meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|$m_class(class)$}; separator="\n"$

            this.Units = new IUnit[]
            {
                $meta.Units:{unit|this.$unit.SingularName$}; separator=", "$
            };

            this.Interfaces = new IInterface[]
            {
                $meta.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|$interface.SingularName$}; separator=", "$
            };
            
            this.Classes = new IClass[]
            {
                $meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|$class.SingularName$}; separator=", "$
            };
        }
    }
}
>>

m_unit(unit) ::= <<
            this.$unit.SingularName$ = new Meta$unit.SingularName$(this);
>>

m_interface(interface) ::= <<
            this.$interface.SingularName$ = new Meta$interface.SingularName$(this);
>>

m_class(class) ::= <<
            this.$class.SingularName$ = new Meta$class.SingularName$(this);
>>

m_record_declaration(class) ::= <<
        public Meta$record.Name$ $record.Name$;
>>

m_unit_implementation(unit) ::= <<
        IMeta$unit.SingularName$ M.$unit.SingularName$ => this.$unit.SingularName$;
>>

m_interface_implementation(interface) ::= <<
        IMeta$interface.SingularName$ M.$interface.SingularName$ => this.$interface.SingularName$;
>>

m_class_implementation(class) ::= <<
        IMeta$class.SingularName$ M.$class.SingularName$ => this.$class.SingularName$;
>>

m_record_implementation(class) ::= <<
        IMeta$record.Name$ M.$record.Name$ => this.$record.Name$;
>>

units(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Static
{
$meta.Units:{unit|$define_unit(unit)$}; separator="\n"$
}
>>

define_unit(unit) ::= <<
    public class Meta$unit.SingularName$ : Unit, IMeta$unit.SingularName$ 
    {
        internal Meta$unit.SingularName$(MetaPopulation m) : base (m, "$unit.Tag$", "$unit.SingularName$") 
        {
        }
    }
>>

interfaces(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Static
{
$meta.Interfaces:{interface|$define_interface(interface)$}; separator="\n"$
}
>>

define_interface(interface) ::= <<
    public class Meta$interface.SingularName$ : Interface, IMeta$interface.SingularName$ {

        public Meta$interface.SingularName$(MetaPopulation m) : base(m, "$interface.Tag$" , new IInterface[]{$interface.WorkspaceSupertypesByWorkspaceName.(workspaceName):{implementedInterface|m.$implementedInterface.SingularName$}; separator=", "$}, "$interface.SingularName$", $if(interface.AssignedPluralName)$"$interface.AssignedPluralName$"$else$null$endif$)
        {
        }

$interface.WorkspaceSubtypesByWorkspaceName.(workspaceName):{subtype|        public IMeta$subtype.SingularName$ As$subtype.SingularName$ => ((M)this.MetaPopulation).$subtype.SingularName$;}; separator="\n"$

$interface.WorkspaceExclusiveMethodTypesByWorkspaceName.(workspaceName):{methodType|        public IMethodType $methodType.Name$ { get; internal set; \}}; separator="\n"$
$interface.WorkspaceInheritedMethodTypesByWorkspaceName.(workspaceName):{methodType|        public IMethodType $methodType.Name$ { get; internal set; \}}; separator="\n"$

$interface.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|        public IRoleType $roleType.Name$ { get; internal set; \}}; separator="\n"$
$interface.WorkspaceInheritedRoleTypesByWorkspaceName.(workspaceName):{roleType|        public IRoleType $roleType.Name$ { get; internal set; \}}; separator="\n"$

$interface.WorkspaceExclusiveAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public IAssociationType $associationType.Name$ { get; internal set; \}}; separator="\n"$
$interface.WorkspaceInheritedAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public IAssociationType $associationType.Name$ { get; internal set; \}}; separator="\n"$

    }

>>

classes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Static
{
$meta.Classes:{class|$define_class(class)$}; separator="\n"$
}
>>

define_class(class) ::= <<
    public class Meta$class.SingularName$ : Class, IMeta$class.SingularName$ {
        
        public Meta$class.SingularName$(MetaPopulation m) : base(m, "$class.Tag$", new IInterface[]{$class.WorkspaceSupertypesByWorkspaceName.(workspaceName):{implementedInterface|m.$implementedInterface.SingularName$}; separator=", "$}, "$class.SingularName$", $if(class.AssignedPluralName)$"$class.AssignedPluralName$"$else$null$endif$)
        {
        }

$class.WorkspaceExclusiveMethodTypesByWorkspaceName.(workspaceName):{methodType|        public IMethodType $methodType.Name$ { get; internal set; \}}; separator="\n"$
$class.WorkspaceInheritedMethodTypesByWorkspaceName.(workspaceName):{methodType|        public IMethodType $methodType.Name$ { get; internal set; \}}; separator="\n"$

$class.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|        public IRoleType $roleType.Name$ { get; internal set; \}}; separator="\n"$
$class.WorkspaceInheritedRoleTypesByWorkspaceName.(workspaceName):{roleType|        public IRoleType $roleType.Name$ { get; internal set; \}}; separator="\n"$

$class.WorkspaceExclusiveAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public IAssociationType $associationType.Name$ { get; internal set; \}}; separator="\n"$
$class.WorkspaceInheritedAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public IAssociationType $associationType.Name$ { get; internal set; \}}; separator="\n"$
    }

>>

associationTypes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Static
{
$meta.Composites:{composite|$define_associationTypes(composite)$}; separator="\n"$
}
>>

define_associationTypes(composite) ::= <<
$composite.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|$define_associationType(roleType.associationType)$}; separator="\n"$
>>

define_associationType(associationType) ::= <<
    public class Meta$associationType.Name$ : AssociationType, IMeta$associationType.Name$
    {
        public Meta$associationType.Name$(MetaPopulation m) : base(m.$associationType.ObjectType.SingularName$)
        {
        }

        IMeta$associationType.ObjectType.SingularName$ IMeta$associationType.Name$.ObjectType => (IMeta$associationType.ObjectType.SingularName$)this.ObjectType;
    }

>>

roleTypes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Static
{
$meta.Composites:{composite|$define_roleTypes(composite)$}; separator="\n"$
}
>>

define_roleTypes(composite) ::= <<
$composite.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|$define_roleType(roleType)$}; separator="\n"$
>>

define_roleType(roleType) ::= <<
    public class Meta$roleType.FullName$ : RoleType, IMeta$roleType.FullName$
    {
        public Meta$roleType.FullName$(MetaPopulation m) : base(m, m.$roleType.ObjectType.Name$.$roleType.AssociationType.Name$, "$roleType.Tag$", m.$roleType.ObjectType.SingularName$$if(roleType.AssignedSingularName)$, "$roleType.AssignedSingularName$"$endif$$if(roleType.AssignedPluralName)$, "$roleType.AssignedPluralName$"$endif$)
        {
$if(roleType.Size)$             this.Size = $roleType.Size$;$endif$        
$if(roleType.Precision)$            this.Precision = $roleType.Precision$;$endif$        
$if(roleType.Scale)$            this.Scale = $roleType.Scale$;$endif$        
$if(roleType.IsRequired)$           this.IsRequired = $roleType.IsRequired$;$endif$        
$if(roleType.IsUnique)$             this.IsUnique = $roleType.IsUnique$;$endif$        
        }
        
$if(roleType.ObjectType.IsComposite)$
        IMeta$roleType.ObjectType.SingularName$ IMeta$roleType.FullName$.ObjectType => ((M)this.MetaPopulation).$roleType.ObjectType.SingularName$;
$endif$
    }

>>

builder(meta, workspaceName) ::= <<
// <auto-generated />
namespace Allors.Workspace.Meta.Static
{
	public class MetaBuilder
	{
        public MetaPopulation Build() {
            var m =  new MetaPopulation();

            this.BuildRelationEndTypes(m);

            #region RoleTypes
            m.RoleTypes = [
$meta.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|$roleType_array(roleType)$}; separator=",\n"$
            ];
            #endregion

            this.BuildMethodTypes(m);

            #region MethodTypes
            m.MethodTypes = [
$meta.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|$methodType_array(methodType)$}; separator=",\n"$
            ];
            #endregion

            m.Init();
            
            this.AssignRelationEndTypes(m);
            this.AssignMethodTypes(m);

            return m;
        }

        private void BuildRelationEndTypes(MetaPopulation m)
        {
$meta.WorkspaceUnitRoleTypesByWorkspaceName.(workspaceName):{roleType|$build_relationEndType(roleType)$}; separator="\n"$
$meta.WorkspaceCompositeRoleTypesByWorkspaceName.(workspaceName):{roleType|$build_relationEndType(roleType)$}; separator="\n"$
        }

        private void BuildMethodTypes(MetaPopulation m)
		{
$meta.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|$build_methodType(methodType)$}; separator="\n"$
		}

        private void AssignRelationEndTypes(MetaPopulation m)
        {
$meta.WorkspaceCompositesByWorkspaceName.(workspaceName):{composite|$assign_properties(composite)$}; separator="\n"$
        }

        private void AssignMethodTypes(MetaPopulation m)
        {
$meta.WorkspaceCompositesByWorkspaceName.(workspaceName):{composite|$assign_methods(composite)$}; separator="\n"$
        }
    }
}
>>

define_roleClasses(class) ::= <<
$class.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|$\n$             public RoleType $class.Name$$roleType.Name$;}$
>>

assign_roleClasses(class) ::= <<
$class.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|$\n$                 this.$class.Name$$roleType.Name$ = roleTypes.$roleType.Name$;}$
>>

build_unit(unit) ::= <<
	        m.$unit.SingularName$.Init(UnitTags.$unit.SingularName$, UnitNames.$unit.SingularName$);
>>

inheritance(composite) ::= <<$composite.WorkspaceDirectSupertypesByWorkspaceName.(workspaceName):{superType|$build_inheritance(composite, superType)$}$>>
build_inheritance(composite, superType) ::= <<$\n$                new Inheritance(m.$composite.SingularName$, m.$superType.SingularName$),>>

build_associationType(roleType) ::= <<
            m.$roleType.ObjectType.SingularName$.$roleType.AssociationType.Name$ = new Meta$roleType.AssociationType.Name$(m);
>>

build_relationEndType(roleType) ::= <<
            m.$roleType.AssociationType.ObjectType.SingularName$.$roleType.Name$ = new RoleType(m, "$roleType.Tag$", "$roleType.SingularName$", "$roleType.PluralName$", m.$roleType.ObjectType.SingularName$, m.$roleType.AssociationType.ObjectType.SingularName$, Allors.Multiplicity.$roleType.Multiplicity$)
            {
$if(roleType.Size)$                 Size = $roleType.Size$,$endif$
$if(roleType.Precision)$                Precision = $roleType.Precision$,$endif$
$if(roleType.Scale)$                Scale = $roleType.Scale$,$endif$
$if(roleType.IsRequired)$               IsRequired = $roleType.IsRequired$,$endif$
$if(roleType.IsUnique)$             IsUnique = $roleType.IsUnique$,$endif$
            };
>>

isDerived(roleType) ::= <<$if(roleType.IsDerived)$isDerived: $roleType.IsDerived$$endif$>>

singularName(roleType) ::= <<$if(roleType.ExistAssignedSingularName)$singularName: "$roleType.SingularName$"$endif$>>
pluralName(roleType) ::= <<$if(roleType.ExistAssignedPluralName)$pluralName: "$roleType.PluralName$"$endif$>>
size(roleType) ::= <<$if(roleType.Size)$size: $roleType.Size$ $endif$>>
precision(roleType) ::= <<$if(roleType.Precision)$precision: $roleType.Precision$$endif$>>
scale(roleType) ::= <<$if(roleType.Scale)$scale: $roleType.Scale$$endif$>>
isRequired(roleType) ::= <<$if(roleType.IsRequired)$isRequired: $roleType.IsRequired$$endif$>>
isUnique(roleType) ::= <<$if(roleType.IsUnique)$isUnique: $roleType.IsUnique$$endif$>>
mediaType(roleType) ::= <<$if(roleType.MediaType)$mediaType: "$roleType.MediaType$"$endif$>>

build_methodType(methodType) ::= <<
            m.$methodType.ObjectType.SingularName$.$methodType.Name$ = new MethodType(m, "$methodType.Tag$", m.$methodType.ObjectType.Name$, "$methodType.Name$");
>>

assign_properties(composite) ::= <<
$composite.WorkspaceInheritedRoleTypesByWorkspaceName.(workspaceName):{roleType|$assign_roleType(roleType)$}; separator="\n"$
$composite.WorkspaceInheritedAssociationTypesByWorkspaceName.(workspaceName):{associationType|$assign_associationType(associationType)$}; separator="\n"$
>>

assign_roleType(roleType) ::= <<
                m.$composite.SingularName$.$roleType.Name$ = m.$roleType.AssociationType.ObjectType.SingularName$.$roleType.Name$;
>>

assign_associationType(associationType) ::= <<
                m.$composite.SingularName$.$associationType.Name$ = m.$associationType.ObjectType.SingularName$.$associationType.RoleType.Name$.AssociationType;
>>

assign_methods(composite) ::= <<
$composite.WorkspaceInheritedMethodTypesByWorkspaceName.(workspaceName):{methodType|$assign_methodType(methodType)$}; separator="\n"$
>>

assign_methodType(methodType) ::= <<
                m.$composite.SingularName$.$methodType.Name$ = m.$methodType.ObjectType.SingularName$.$methodType.Name$;
>>

roleType_array(roleType) ::= <<
                	m.$roleType.AssociationType.ObjectType.SingularName$.$roleType.Name$
>>

methodType_array(methodType) ::= <<
                	m.$methodType.ObjectType.Name$.$methodType.Name$
>>

DropEmpty ::= ["": false, default: key]

Separated(l, s, w=false) ::= "$if (DropEmpty.(first(l)))$$if (w)$$s$$endif$$first(l)$$Separated(rest(l), s, true)$$else$$if (rest(l))$$Separated(rest(l), s, w)$$endif$$endif$"


