@page "/person/list"
@using Allors.Workspace
@using Allors.Workspace.Data
@using Allors.Workspace.Domain
@using Allors.Workspace.Meta
@using Task = System.Threading.Tasks.Task
@implements IDisposable
@inject IWorkspaceFactory WorkspaceFactory

<PageTitle>People</PageTitle>

@if (this.People.Value?.Length == 0)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only"></span>
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">First Name</th>
                <th scope="col">Greeting</th>
                <th scope="col">P.O. Box</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in People.Value)
            {
                <tr>
                    <td>@person.FirstName</td>
                    <td>@person.DomainGreeting</td>
                    <td>@person.MailboxAddress.Value?.PoBox</td>
                    <td>
                        <NavLink href="@Overview(person)">view</NavLink>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public IWorkspace Workspace = null!;

    public IValueSignal<Person[]> People { get; private set; }

    public IEffect Effect { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        this.Workspace = this.WorkspaceFactory.CreateWorkspace();
        var m = this.Workspace.Services.Get<M>();
        var dispatcher = this.Workspace.Services.Get<IDispatcherBuilder>().Build(this.Workspace);

        this.People = dispatcher.CreateValueSignal(Array.Empty<Person>());
        this.Effect = dispatcher.CreateEffect(v => v.Track(this.People), this.StateHasChanged);

        var pull = new Pull
            {
                Extent = new Filter(m.Person),
                Results = new[]
                {
                    new Result
                    {
                        Include = m.Person.Nodes(v=>v.MailboxAddress.Node())
                    }
                }
            };

        var result = await this.Workspace.PullAsync(pull);
        var people = result.GetCollection<Person>();

        // await Task.Delay(1000);

        this.People.Value = people;
    }

    public void Dispose()
    {
        Effect.Dispose();
    }

    private object Overview(Person person) => $"/person/overview/{@person.Id}";
}