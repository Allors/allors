@page "/person/overview/{Id}"
@using Allors.Workspace
@using Allors.Workspace.Data
@using Allors.Workspace.Domain
@using Allors.Workspace.Meta
@using Allors.Workspace.Signals
@using Task = System.Threading.Tasks.Task
@implements IDisposable
@inject IWorkspaceFactory WorkspaceFactory

<PageTitle>People</PageTitle>

@if (this.Person.Value == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only"></span>
    </div>
}
else
{
    @this.Person.Value?.FirstName.Value

    <div>
        <NavLink href="@Edit()">edit</NavLink>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; } = null!;

    public IWorkspace Workspace = null!;

    public IValueSignal<Person?> Person { get; private set; } = null!;

    public IEffect Effect { get; private set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        this.Workspace = this.WorkspaceFactory.CreateWorkspace();
        var m = this.Workspace.Services.Get<M>();
        var dispatcher = this.Workspace.Services.Get<IDispatcherBuilder>().Build(this.Workspace);

        this.Person = dispatcher.CreateValueSignal<Person?>(null);
        this.Effect = dispatcher.CreateEffect(v => v.Track(this.Person), this.StateHasChanged);

        var result = await this.Workspace.PullAsync(new Pull
            {
                ObjectId = long.Parse(this.Id),
                Results = new[]
                                            {
                    new Result
                    {
                        Select = new Select
                        {
                            Include = m.MailboxAddress.Nodes()
                        }
                    }
                }
            });

        // await Task.Delay(1000);

        this.Person.Value = result.GetObject<Person>();
    }

    public void Dispose()
    {
        Effect.Dispose();
    }

    private object Edit() => $"/person/edit/{Id}";
}