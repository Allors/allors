@page "/person/edit/{Id}"
@using Allors.Workspace.Data
@using Allors.Workspace
@using Allors.Workspace.Domain
@using Allors.Workspace.Meta
@using Task = System.Threading.Tasks.Task
@implements IDisposable
@inject IWorkspaceFactory WorkspaceFactory
@inject NavigationManager NavigationManager

<PageTitle>People</PageTitle>

@if (this.Result?.HasErrors == true)
{
    <div class="text-error" role="error">
        Error!
    </div>
}

@if (this.Person.Value == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only"></span>
    </div>
}
else
{
    <EditForm Model="@this.Person" OnValidSubmit=@ValidFormSubmitted>
        <div class="form-group">
            <label for="FirstName">First Name</label>
            <InputText @bind-Value=this.FirstName.Value!.Value class="form-control" id="FirstName" />
        </div>

        <div class="form-group">
            <label for="PoBox">P.O. Box</label>
            @if (this.PoBox.Value == null)
            {
                <input readonly class="form-control" id="PoBox" value="not defined">
            }
            else
            {
                <InputText @bind-Value=this.PoBox.Value.Value class="form-control" id="PoBox" />
            }
        </div>

        <input type="submit" class="btn btn-primary" value="Save" />
    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; } = null!;

    public IWorkspace Workspace = null!;

    public IPushResult? Result { get; set; } 

    public IValueSignal<Person?> Person { get; private set; } = null!;

    public IComputedSignal<IUnitRole<string>?> FirstName { get; private set; } = null!;

    public IComputedSignal<ICompositeRole<MailboxAddress>?> MailboxAddress { get; private set; } = null!;

    public IComputedSignal<IUnitRole<string>?> PoBox { get; private set; } = null!;

    public IEffect Effect { get; private set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        this.Workspace = this.WorkspaceFactory.CreateWorkspace();
        var dispatcher = this.Workspace.Services.Get<IDispatcherBuilder>().Build(this.Workspace);

        this.Person = dispatcher.CreateValueSignal<Person?>(null);
        this.FirstName = dispatcher.CreateComputedSignal(tracker => this.Person.TrackedValue(tracker)?.FirstName.Track(tracker));
        this.MailboxAddress = dispatcher.CreateComputedSignal(tracker => this.Person.TrackedValue(tracker)?.MailboxAddress.Track(tracker));
        this.PoBox = dispatcher.CreateComputedSignal(tracker => this.MailboxAddress.TrackedValue(tracker).TrackedValue(tracker)?.PoBox.Track(tracker));

        this.Effect = dispatcher.CreateEffect(v =>
        {
            v.Track(this.FirstName);
            v.Track(this.PoBox);
        }, this.StateHasChanged);

        await LoadAsync();
    }

    public void Dispose()
    {
        Effect.Dispose();
    }

    async Task ValidFormSubmitted(EditContext editContext)
    {
        this.Result = await this.Workspace.PushAsync();

        if (!this.Result.HasErrors)
        {
            this.NavigationManager.NavigateTo($"/person/overview/{Id}");
        }

        this.Workspace.Reset();
        await this.LoadAsync();
    }

    private async Task LoadAsync()
    {
        var m = this.Workspace.Services.Get<M>();

        var result = await this.Workspace.PullAsync(new Pull
            {
                ObjectId = long.Parse(this.Id),
                Results = new[]
                                                                                                    {
                    new Result
                    {
                        Include = m.Person.Nodes(v=>v.MailboxAddress.Node())
                    }
                }
            });


        this.Person.Value = result.GetObject<Person>();
    }
}