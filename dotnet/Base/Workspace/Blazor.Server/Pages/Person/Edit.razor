@page "/person/edit/{Id}"
@using Allors.Workspace.Data
@using Allors.Workspace
@using Allors.Workspace.Domain
@using Allors.Workspace.Meta
@using Allors.Workspace.Signals
@using Task = System.Threading.Tasks.Task
@implements IDisposable
@inject IWorkspaceFactory WorkspaceFactory
@inject NavigationManager NavigationManager

<PageTitle>People</PageTitle>

@if (this.Result?.HasErrors == true)
{
    <div class="text-error" role="error">
        Error!
    </div>
}

@if (this.Person == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only"></span>
    </div>
}
else
{
    <EditForm Model="@this.Person" OnValidSubmit=@ValidFormSubmitted>
        <div class="form-group">
            <label for="FirstName">First Name</label>
            <InputText @bind-Value=this.FirstName class="form-control" id="FirstName" />
        </div>

        <div class="form-group">
            <label for="PoBox">P.O. Box</label>
            @if (this.PoBox == null)
            {
                <input readonly class="form-control" id="PoBox" value="not defined">
            }
            else
            {
                <InputText @bind-Value=this.PoBox class="form-control" id="PoBox" />
            }
        </div>

        <input type="submit" class="btn btn-primary" value="Save" />
    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; } = null!;

    public IWorkspace Workspace = null!;

    public IPushResult? Result { get; set; }

    public Person? Person { get; private set; }

    public string? FirstName
    {
        get => this.Person?.FirstName.Value;
        set => this.Person!.FirstName.Value = value;
    }

    public string? PoBox
    {
        get => this.Person?.MailboxAddress.Value?.PoBox.Value;
        set => this.Person!.MailboxAddress.Value.PoBox.Value = value;
    }

    private ComputedSignal<ICompositeRole<MailboxAddress>>? mailboxAddress;
    private ComputedSignal<IUnitRole<string>?>? poBox;
    private Effect? stateHasChangedEffect;

    protected override async Task OnInitializedAsync()
    {
        this.Workspace = this.WorkspaceFactory.CreateWorkspace();

        await LoadAsync();
    }

    public void Dispose()
    {
        this.stateHasChangedEffect?.Dispose();

        this.mailboxAddress?.Dispose();
        this.poBox?.Dispose();
    }

    async Task ValidFormSubmitted(EditContext editContext)
    {
        this.Result = await this.Workspace.PushAsync();

        if (!this.Result.HasErrors)
        {
            this.NavigationManager.NavigateTo($"/person/overview/{Id}");
        }

        this.Workspace.Reset();
        await this.LoadAsync();
    }

    private async Task LoadAsync()
    {
        var m = this.Workspace.Services.Get<M>();

        var result = await this.Workspace.PullAsync(new Pull
            {
                ObjectId = long.Parse(this.Id),
                Results = new[]
                                                                                                                                                    {
                    new Result
                    {
                        Include = m.Person.Nodes(v=>v.MailboxAddress.Node())
                    }
                }
            });

        this.stateHasChangedEffect?.Dispose();

        this.Person = result.GetObject<Person>();

        this.mailboxAddress = new ComputedSignal<ICompositeRole<MailboxAddress>>(tracker => this.Person.MailboxAddress.Track(tracker));
        this.poBox = new ComputedSignal<IUnitRole<string>?>(tracker => this.mailboxAddress.Value?.Track(tracker).Value?.PoBox.Track(tracker));

        this.stateHasChangedEffect = new Effect(this.StateHasChanged, v =>
        {
            v.Add(this.Person.FirstName);
            v.Add(this.poBox);
        });
    }
}