delimiters "$", "$"

TemplateId() ::= <<07F63139-1791-4F55-AAED-F1A6D8D40055>>
TemplateName() ::= <<Allors C# Workspace Domain>>
TemplateVersion() ::= <<3.0.10>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta, workspaceName) ::= <<
$!
Copyright 2002-2023 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	$meta.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|<generation template="castInterface" input="$interface.Id $" output="$interface.SingularName$.g.cs"/>}$
	$meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|<generation template="castClass" input="$class.Id $" output="$class.SingularName$.g.cs"/>}$
</generations>
>>

castInterface(meta, objectType, workspaceName) ::= <<
$interface(meta, objectType)$
>>

interface(meta, interface) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Domain
{
	public partial interface $interface.name$ : IObject $if(interface.WorkspaceDirectSupertypesByWorkspaceName.(workspaceName))$ $interface.WorkspaceDirectSupertypesByWorkspaceName.(workspaceName):{directSupertype|, $directSupertype.SingularName$}$ $endif$
	{
$interface.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|$interfaceRoleType()$}$

$interface.WorkspaceExclusiveAssociationTypesByWorkspaceName.(workspaceName):{associationType|$interfaceAssociationType()$}; separator="\n"$

$interface.WorkspaceExclusiveMethodTypesByWorkspaceName.(workspaceName):{methodType|$interfaceMethodType()$}; separator="\n"$
	}
	
	public partial class $interface.SingularName$Role : CompositeRole<$interface.SingularName$>
	{
        public $interface.SingularName$Role(IStrategy strategy, Allors.Workspace.Meta.IRoleType roleType) : base(strategy, roleType)
        {
        }
	}

	public partial class $interface.PluralName$Role : CompositesRole<$interface.SingularName$>
	{
        public $interface.PluralName$Role(IStrategy strategy, Allors.Workspace.Meta.IRoleType roleType) : base(strategy, roleType)
        {
        }
	}

	public partial class $interface.SingularName$Association : CompositeAssociation<$interface.SingularName$>
	{
        public $interface.SingularName$Association(IStrategy strategy, Allors.Workspace.Meta.IAssociationType associationType) : base(strategy, associationType)
        {
        }
	}

	public partial class $interface.PluralName$Association : CompositesAssociation<$interface.SingularName$>
	{
        public $interface.PluralName$Association(IStrategy strategy, Allors.Workspace.Meta.IAssociationType associationType) : base(strategy, associationType)
        {
        }
	}

$interface.WorkspaceExclusiveMethodTypesByWorkspaceName.(workspaceName):{methodType|$interfaceMethodTypeObject()$}; separator="\n"$
}
>>

interfaceRoleType() ::= <<
$\n$
$if(roleType.ObjectType.IsUnit)$
		I$roleType.ObjectType.SingularName$Role $roleType.SingularName$
		{
			get;
		}
$else$
$if(roleType.IsOne)$
	$roleType.ObjectType.SingularName$Role $roleType.SingularName$
	{
		get;
	}
$else$
	$roleType.ObjectType.PluralName$Role $roleType.PluralName$
	{
		get;
	}
$endif$
$endif$
>>

interfaceAssociationType() ::= <<

$if(associationType.IsOne)$
		$associationType.ObjectType.SingularName$Association $associationType.SingularName$
		{
			get;
		}
$else$
		$associationType.ObjectType.PluralName$Association $associationType.PluralName$
		{
			get;
		}
$endif$
>>

interfaceMethodType() ::= <<
        $interface.SingularName$$methodType.Name$Method $methodType.Name$ { get; }
>>

interfaceMethodTypeObject() ::= <<
	public partial class $interface.SingularName$$methodType.Name$Method : Method
	{
        public $interface.SingularName$$methodType.Name$Method(IStrategy strategy, Allors.Workspace.Meta.IMethodType methodType) : base(strategy, methodType)
        {
        }
	}
>>


castClass(meta, objectType, workspaceName) ::= <<
$class(meta,objectType)$
>>

class(meta,class) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Domain
{
    using System.Linq;

	public partial class $class.name$ : IObject $class.WorkspaceDirectSupertypesByWorkspaceName.(workspaceName):{directSupertype|, $directSupertype.SingularName$}$
	{
        public Allors.Workspace.Meta.M M { get; }

		public IObjectFactory O { get; }

		public $class.name$(IStrategy strategy)
		{
            this.Strategy = strategy;
			this.M = (Allors.Workspace.Meta.M)strategy.Workspace.MetaPopulation;
  			this.O = strategy.Workspace.Services.Get<IObjectFactory>();
        }

        IStrategy IObject.Strategy => this.Strategy;

        public IStrategy Strategy { get; }

		public long Id
		{
			get
			{
				return this.Strategy.Id;
			}
		}

        public Allors.Workspace.Meta.IMeta$class.name$ Meta
		{
			get
			{
				return this.M.$class.SingularName$;
			}
		}

		public override bool Equals(object obj)
        {
            var that = obj as IObject;
		    if (that == null)
		    {
		        return false;
		    }

		    return this.Id.Equals(that.Id);
        }

		public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }

$class.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{concreteRoleType|$classConcreteRoleType_Class()$}$

$class.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|$classAssociationType()$}; separator="\n"$

$class.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|$classMethodType()$}; separator="\n"$
	}

	public partial class $class.SingularName$Role : CompositeRole<$class.SingularName$>
	{
        public $class.SingularName$Role(IStrategy strategy, Allors.Workspace.Meta.IRoleType roleType) : base(strategy, roleType)
        {
        }
	}

	public partial class $class.PluralName$Role : CompositesRole<$class.SingularName$>
	{
        public $class.PluralName$Role(IStrategy strategy, Allors.Workspace.Meta.IRoleType roleType) : base(strategy, roleType)
        {
        }
	}

	public partial class $class.SingularName$Association : CompositeAssociation<$class.SingularName$>
	{
        public $class.SingularName$Association(IStrategy strategy, Allors.Workspace.Meta.IAssociationType associationType) : base(strategy, associationType)
        {
        }
	}

	public partial class $class.PluralName$Association : CompositesAssociation<$class.SingularName$>
	{
        public $class.PluralName$Association(IStrategy strategy, Allors.Workspace.Meta.IAssociationType associationType) : base(strategy, associationType)
        {
        }
	}

$class.WorkspaceExclusiveMethodTypesByWorkspaceName.(workspaceName):{methodType|$classMethodTypeObject()$}; separator="\n"$	
}
>>

classMethodType() ::= <<
			public $methodType.ObjectType.SingularName$$methodType.Name$Method $methodType.Name$
			{
				get
				{
					return this.O.Method<$methodType.ObjectType.SingularName$$methodType.Name$Method>(this.Strategy, Meta.$methodType.Name$);
				}
			}
>>

classConcreteRoleType_Class() ::= <<
$if(concreteRoleType.ObjectType.IsUnit)$
		virtual public I$concreteRoleType.ObjectType.SingularName$Role $concreteRoleType.SingularName$
		{
			get
			{
				return this.Strategy.$concreteRoleType.ObjectType.SingularName$Role(Meta.$concreteRoleType.Name$);
			}
		}
$else$
$if(concreteRoleType.IsMany)$
		virtual public $concreteRoleType.ObjectType.PluralName$Role $concreteRoleType.PluralName$
		{
			get
			{
			    return this.O.CompositesRole<$concreteRoleType.ObjectType.PluralName$Role>(this.Strategy, Meta.$concreteRoleType.Name$);
			}
		}
$else$
		virtual public $concreteRoleType.ObjectType.SingularName$Role $concreteRoleType.SingularName$
		{
			get
			{
			    return this.O.CompositeRole<$concreteRoleType.ObjectType.SingularName$Role>(this.Strategy, Meta.$concreteRoleType.Name$);
			}
		}
$endif$
$endif$
>>

classAssociationType() ::= <<

$if(associationType.IsOne)$
		public $associationType.ObjectType.SingularName$Association $associationType.SingularName$
		{
            get
            {
                return this.O.CompositeAssociation<$associationType.ObjectType.SingularName$Association>(this.Strategy, Meta.$associationType.Name$);
            }
		}
$else$
		public $associationType.ObjectType.PluralName$Association $associationType.PluralName$
		{
            get
            {
                return this.O.CompositesAssociation<$associationType.ObjectType.PluralName$Association>(this.Strategy, Meta.$associationType.Name$);
            }
		}
$endif$
>>

classMethodTypeObject() ::= <<
	public partial class $methodType.ObjectType.SingularName$$methodType.Name$Method : Method
	{
        public $methodType.ObjectType.SingularName$$methodType.Name$Method(IStrategy strategy, Allors.Workspace.Meta.IMethodType methodType) : base(strategy, methodType) 
		{
		}
	}
>>

roleType_ObjectType(roleType) ::= <%
$if(roleType.IsRequired)$
$objectType_Name(roleType.ObjectType)$
$else$
$objectType_NullableName(roleType.ObjectType)$
$endif$
%>

concreteRoleType_ObjectType(roleType) ::= <%
$if(concreteRoleType.IsRequired)$
$objectType_Name(concreteRoleType.ObjectType)$
$else$
$objectType_NullableName(concreteRoleType.ObjectType)$
$endif$
%>

objectType_Name(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean
$elseif(objectType.IsDecimal)$
	global::System.Decimal
$elseif(objectType.IsDateTime)$
	global::System.DateTime
$elseif(objectType.IsFloat)$
	global::System.Double
$elseif(objectType.IsInteger)$
	global::System.Int32
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid
$else$
not found ...
$endif$
$else$
	$objectType.SingularName$
$endif$
%>

objectType_NullableName(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean?
$elseif(objectType.IsDecimal)$
	global::System.Decimal?
$elseif(objectType.IsDateTime)$
	global::System.DateTime?
$elseif(objectType.IsFloat)$
	global::System.Double?
$elseif(objectType.IsInteger)$
	global::System.Int32?
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid?
$else$
not found ...
$endif$
$else$
	$objectType.SingularName$
$endif$
%>
