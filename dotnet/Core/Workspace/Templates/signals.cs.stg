delimiters "$", "$"

TemplateId() ::= <<07F63139-1791-4F55-AAED-F1A6D8D40055>>
TemplateName() ::= <<Allors C# Workspace Signals>>
TemplateVersion() ::= <<3.0.0>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta, workspaceName) ::= <<
$!
Copyright 2002-2023 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	$meta.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|<generation template="objectType" input="$interface.Id $" output="$interface.SingularName$.g.cs"/>}$
	$meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|<generation template="objectType" input="$class.Id $" output="$class.SingularName$.g.cs"/>}$
</generations>
>>

objectType(meta, objectType, workspaceName) ::= <<
// <auto-generated/>
#pragma warning disable
#nullable enable

namespace Allors.Workspace.Domain
{
    using Signals;

	public static partial class $objectType.name$Extensions
	{
$objectType.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|$roleType()$}$

$objectType.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|$associationType()$}; separator="\n"$

$objectType.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|$methodType()$}; separator="\n"$
	}
}
>>

roleType() ::= <<
$\n$
$if(roleType.ObjectType.IsUnit)$
		public static IUnitRole<$objectType_NullableName(roleType.objectType)$>? $roleType.SingularName$(this $objectType.SingularName$? @this, ITracker tracker)
		{
			var role = @this?.$roleType.SingularName$;
			tracker.Track(role);
			return role;
		}
$else$
$if(roleType.IsOne)$
	public static ICompositeRole<$roleType.ObjectType.SingularName$>? $roleType.SingularName$(this $objectType.SingularName$? @this, ITracker tracker)
	{
		var role = @this?.$roleType.SingularName$;
		tracker.Track(role);
		return role;
	}
$else$
	public static ICompositesRole<$roleType.ObjectType.SingularName$>? $roleType.PluralName$(this $objectType.SingularName$? @this, ITracker tracker)
	{
		var role = @this?.$roleType.PluralName$;
		tracker.Track(role);
		return role;
	}
$endif$
$endif$
>>

associationType() ::= <<

$if(associationType.IsOne)$
		public static ICompositeAssociation<$associationType.ObjectType.SingularName$>? $associationType.SingularName$(this $objectType.SingularName$? @this, ITracker tracker)
		{
			var association = @this?.$associationType.SingularName$;
			tracker.Track(association);
			return association;
		}
$else$
		public static ICompositesAssociation<$associationType.ObjectType.SingularName$>? $associationType.PluralName$(this $objectType.SingularName$? @this, ITracker tracker)
		{
			var association = @this?.$associationType.PluralName$;
			tracker.Track(association);
			return association;
		}
$endif$
>>

methodType() ::= <<
		public static IMethod? $methodType.Name$(this $objectType.SingularName$? @this, ITracker tracker)
		{
			var method = @this?.$methodType.Name$;
			tracker.Track(method);
			return method;
		}
>>

objectType_NullableName(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean?
$elseif(objectType.IsDecimal)$
	global::System.Decimal?
$elseif(objectType.IsDateTime)$
	global::System.DateTime?
$elseif(objectType.IsFloat)$
	global::System.Double?
$elseif(objectType.IsInteger)$
	global::System.Int32?
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid?
$else$
not found ...
$endif$
$else$
	$objectType.SingularName$
$endif$
%>
