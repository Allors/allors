group AllorsCSharpRepository;

TemplateId() ::= <<7B7D955D-7C87-4198-A40D-4B70CABC7525>>
TemplateName() ::= <<Allors C# Workspace Meta>>
TemplateVersion() ::= <<3.0.3>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta, workspaceName) ::= <<
$!
Copyright 2002-2022 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
    <generation template="m" output="m.g.cs"/>
	<generation template="units" output="units.g.cs"/>
	<generation template="interfaces" output="interfaces.g.cs"/>
	<generation template="classes" output="classes.g.cs"/>
	<generation template="associationTypes" output="associationTypes.g.cs"/>
	<generation template="roleTypes" output="roleTypes.g.cs"/>
    <generation template="builder" output="builder.g.cs"/>
</generations>
>>

m(meta, workspaceName) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Meta
{
    public sealed class M : MetaPopulation
    {
        // Units
$meta.Units:{unit|        public readonly Meta$unit.SingularName$ $unit.SingularName$;}; separator="\n"$

        // Interfaces
$meta.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|        public readonly Meta$interface.SingularName$ $interface.SingularName$;}; separator="\n"$

        // Classes
$meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|        public readonly Meta$class.SingularName$ $class.SingularName$;}; separator="\n"$

        internal M()
        {
            // Units
$meta.Units:{unit|$m_unit(unit)$}; separator="\n"$

            // Interfaces
$meta.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|$m_interface(interface)$}; separator="\n"$

            // Classes
$meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|$m_class(class)$}; separator="\n"$

            this.Units = new Unit[]
            {
                $meta.Units:{unit|this.$unit.SingularName$}; separator=", "$
            };

            this.Interfaces = new Interface[]
            {
                $meta.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|$interface.SingularName$}; separator=", "$
            };
            
            this.Classes = new Class[]
            {
                $meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|$class.SingularName$}; separator=", "$
            };
        }
    }
}
>>

m_unit(unit) ::= <<
            this.$unit.SingularName$ = new Meta$unit.SingularName$(this);
>>

m_interface(interface) ::= <<
            this.$interface.SingularName$ = new Meta$interface.SingularName$(this);
>>

m_class(class) ::= <<
            this.$class.SingularName$ = new Meta$class.SingularName$(this);
>>

units(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta
{
$meta.Units:{unit|$define_unit(unit)$}; separator="\n"$
}
>>

define_unit(unit) ::= <<
    public class Meta$unit.SingularName$ : Unit 
    {
        internal Meta$unit.SingularName$(M m) : base (m, "$unit.Tag$", "$unit.SingularName$") 
        {
        }
    }
>>

interfaces(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta
{
$meta.Interfaces:{interface|$define_interface(interface)$}; separator="\n"$
}
>>

define_interface(interface) ::= <<
    public class Meta$interface.SingularName$ : Interface {

        public Meta$interface.SingularName$(M m) : base(m, "$interface.Tag$" , new Interface[]{$interface.WorkspaceSupertypesByWorkspaceName.(workspaceName):{implementedInterface|m.$implementedInterface.SingularName$}; separator=", "$}, "$interface.SingularName$", $if(interface.AssignedPluralName)$"$interface.AssignedPluralName$"$else$null$endif$)
        {
        }

$interface.WorkspaceSubtypesByWorkspaceName.(workspaceName):{subtype|        public Meta$subtype.SingularName$ As$subtype.SingularName$ => ((M)this.MetaPopulation).$subtype.SingularName$;}; separator="\n"$

$interface.WorkspaceExclusiveMethodTypesByWorkspaceName.(workspaceName):{methodType|        public MethodType $methodType.Name$ { get; \} = new MethodType();}; separator="\n"$
$interface.WorkspaceInheritedMethodTypesByWorkspaceName.(workspaceName):{methodType|        public MethodType $methodType.Name$ { get; internal set; \}}; separator="\n"$

$interface.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|        public Meta$roleType.FullName$ $roleType.Name$ { get; \} = new Meta$roleType.FullName$();}; separator="\n"$
$interface.WorkspaceInheritedRoleTypesByWorkspaceName.(workspaceName):{roleType|        public Meta$roleType.FullName$ $roleType.Name$ { get; internal set; \}}; separator="\n"$

$interface.WorkspaceExclusiveAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public Meta$associationType.Name$ $associationType.Name$ { get; \} = new Meta$associationType.Name$();}; separator="\n"$
$interface.WorkspaceInheritedAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public Meta$associationType.Name$ $associationType.Name$ { get; internal set; \}}; separator="\n"$

    }

>>

classes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta
{
$meta.Classes:{class|$define_class(class)$}; separator="\n"$
}
>>

define_class(class) ::= <<
    public class Meta$class.SingularName$ : Class {
        
        public Meta$class.SingularName$(M m) : base(m, "$class.Tag$", new Interface[]{$class.WorkspaceSupertypesByWorkspaceName.(workspaceName):{implementedInterface|m.$implementedInterface.SingularName$}; separator=", "$}, "$class.SingularName$", $if(class.AssignedPluralName)$"$class.AssignedPluralName$"$else$null$endif$)
        {
        }

$class.WorkspaceExclusiveMethodTypesByWorkspaceName.(workspaceName):{methodType|        public MethodType $methodType.Name$ { get; \} = new MethodType();}; separator="\n"$
$class.WorkspaceInheritedMethodTypesByWorkspaceName.(workspaceName):{methodType|        public MethodType $methodType.Name$ { get; internal set; \}}; separator="\n"$

$class.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|        public Meta$roleType.FullName$ $roleType.Name$ { get; \} = new Meta$roleType.FullName$();}; separator="\n"$
$class.WorkspaceInheritedRoleTypesByWorkspaceName.(workspaceName):{roleType|        public Meta$roleType.FullName$ $roleType.Name$ { get; internal set; \}}; separator="\n"$

$class.WorkspaceExclusiveAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public Meta$associationType.Name$ $associationType.Name$ { get; \} = new Meta$associationType.Name$();}; separator="\n"$
$class.WorkspaceInheritedAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public Meta$associationType.Name$ $associationType.Name$ { get; internal set; \}}; separator="\n"$
    }

>>

associationTypes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta
{
$meta.Composites:{composite|$define_associationTypes(composite)$}; separator="\n"$
}
>>

define_associationTypes(composite) ::= <<
$composite.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|$define_associationType(roleType.associationType)$}; separator="\n"$
>>

define_associationType(associationType) ::= <<
    public class Meta$associationType.Name$ : AssociationType
    {
        new Meta$associationType.ObjectType.SingularName$ ObjectType => ((M)this.MetaPopulation).$associationType.ObjectType.SingularName$;
    }

>>

roleTypes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta
{
$meta.Composites:{composite|$define_roleTypes(composite)$}; separator="\n"$
}
>>

define_roleTypes(composite) ::= <<
$composite.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|$define_roleType(roleType)$}; separator="\n"$
>>

define_roleType(roleType) ::= <<
    public class Meta$roleType.FullName$ : RoleType
    {

$if(roleType.ObjectType.IsComposite)$
        new Meta$roleType.ObjectType.SingularName$ ObjectType => ((M)this.MetaPopulation).$roleType.ObjectType.SingularName$;
$endif$
    }

>>

builder(meta, workspaceName) ::= <<
// <auto-generated />
namespace Allors.Workspace.Meta
{
	public class MetaBuilder
	{
        public M Build() {
            var m =  new M();

            var relationTypes = this.BuildRelationTypes(m);
            var methodTypes = this.BuildMethodTypes(m);

            this.AssignPropertyTypes(m);
            this.AssignMethodTypes(m);

            m.Init(relationTypes, methodTypes);

            return m;
        }

        private RelationType[] BuildRelationTypes(M m)
        {

            return new RelationType[]
            {
$meta.WorkspaceRelationTypesByWorkspaceName.(workspaceName):{relationType|            this.Build$relationType.Name$(m),}; separator="\n"$
            };
        }

$meta.WorkspaceRelationTypesByWorkspaceName.(workspaceName):{relationType|$build_relationType(relationType)$}; separator="\n"$

        private MethodType[] BuildMethodTypes(M m)
		{
		    return new MethodType[]
                {$meta.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|            this.Build$methodType.FullName$(m),}; separator="\n"$
                };
		}

        private void AssignPropertyTypes(M m)
        {
$meta.WorkspaceCompositesByWorkspaceName.(workspaceName):{composite|$assign_properties(composite)$}; separator="\n"$
        }

        private void AssignMethodTypes(M m)
        {
$meta.WorkspaceCompositesByWorkspaceName.(workspaceName):{composite|$assign_methods(composite)$}; separator="\n"$
        }

$meta.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|$build_methodType(methodType)$}; separator="\n"$
    }
}
>>

define_roleClasses(class) ::= <<
$class.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|$\n$             public RoleType $class.Name$$roleType.Name$;}$
>>

assign_roleClasses(class) ::= <<
$class.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|$\n$                 this.$class.Name$$roleType.Name$ = relationTypes.$roleType.RelationType.Name$.RoleType;}$
>>

build_unit(unit) ::= <<
	        m.$unit.SingularName$.Init(UnitTags.$unit.SingularName$, UnitNames.$unit.SingularName$);
>>

inheritance(composite) ::= <<$composite.WorkspaceDirectSupertypesByWorkspaceName.(workspaceName):{superType|$build_inheritance(composite, superType)$}$>>
build_inheritance(composite, superType) ::= <<$\n$                new Inheritance(m.$composite.SingularName$, m.$superType.SingularName$),>>

build_relationType(relationType) ::= <<
        private RelationType Build$relationType.Name$(M m)
        {
            var associationType = (AssociationType)$if(relationType.RoleType.ObjectType.IsUnit)$new AssociationTypeWithUnitRole();$else$m.$relationType.RoleType.ObjectType.SingularName$.$relationType.AssociationType.Name$;$endif$
            var roleType = (RoleType)m.$relationType.AssociationType.ObjectType.SingularName$.$relationType.RoleType.Name$;

            var relationType = new RelationType("$relationType.Tag$", associationType, m.$relationType.AssociationType.ObjectType.Name$, roleType, m.$relationType.RoleType.ObjectType.Name$$if(relationType.Multiplicity)$, Allors.Multiplicity.$relationType.Multiplicity$$endif$);

            relationType.Init($Separated([isDerived(relationType)], ",")$);

$initRoleType(roleType=relationType.RoleType)$

            return relationType;
        }
>>

isDerived(relationType) ::= <<$if(relationType.IsDerived)$isDerived: $relationType.IsDerived$$endif$>>

initRoleType(roleType) ::= <<
            roleType.Init($Separated([singularName(roleType), pluralName(roleType), size(roleType), precision(roleType), scale(roleType), isRequired(roleType), isUnique(roleType), mediaType(roleType)], ",")$);
>>

singularName(roleType) ::= <<$if(roleType.ExistAssignedSingularName)$singularName: "$roleType.SingularName$"$endif$>>
pluralName(roleType) ::= <<$if(roleType.ExistAssignedPluralName)$pluralName: "$roleType.PluralName$"$endif$>>
size(roleType) ::= <<$if(relationType.RoleType.Size)$size: $relationType.RoleType.Size$ $endif$>>
precision(roleType) ::= <<$if(relationType.RoleType.Precision)$precision: $relationType.RoleType.Precision$$endif$>>
scale(roleType) ::= <<$if(relationType.RoleType.Scale)$scale: $relationType.RoleType.Scale$$endif$>>
isRequired(roleType) ::= <<$if(relationType.RoleType.IsRequired)$isRequired: $relationType.RoleType.IsRequired$$endif$>>
isUnique(roleType) ::= <<$if(relationType.RoleType.IsUnique)$isUnique: $relationType.RoleType.IsUnique$$endif$>>
mediaType(roleType) ::= <<$if(relationType.MediaType)$mediaType: "$relationType.MediaType$"$endif$>>

build_methodType(methodType) ::= <<
        private MethodType Build$methodType.FullName$(M m)
        {
            return ((MethodType)m.$methodType.ObjectType.Name$.$methodType.Name$).Init("$methodType.Tag$", m.$methodType.ObjectType.Name$, "$methodType.Name$");
        }
>>

assign_properties(composite) ::= <<
$composite.WorkspaceInheritedRoleTypesByWorkspaceName.(workspaceName):{roleType|$assign_roleType(roleType)$}; separator="\n"$
$composite.WorkspaceInheritedAssociationTypesByWorkspaceName.(workspaceName):{associationType|$assign_associationType(associationType)$}; separator="\n"$
>>

assign_roleType(roleType) ::= <<
                m.$composite.SingularName$.$roleType.Name$ = m.$roleType.AssociationType.ObjectType.SingularName$.$roleType.Name$;
>>

assign_associationType(associationType) ::= <<
                m.$composite.SingularName$.$associationType.Name$ = (Meta$associationType.Name$) m.$associationType.ObjectType.SingularName$.$associationType.RoleType.Name$.AssociationType;
>>

assign_methods(composite) ::= <<
$composite.WorkspaceInheritedMethodTypesByWorkspaceName.(workspaceName):{methodType|$assign_methodType(methodType)$}; separator="\n"$
>>

assign_methodType(methodType) ::= <<
                m.$composite.SingularName$.$methodType.Name$ = m.$methodType.ObjectType.SingularName$.$methodType.Name$;
>>

DropEmpty ::= ["": false, default: key]

Separated(l, s, w=false) ::= "$if (DropEmpty.(first(l)))$$if (w)$$s$$endif$$first(l)$$Separated(rest(l), s, true)$$else$$if (rest(l))$$Separated(rest(l), s, w)$$endif$$endif$"


